package main

// Edit if desired. Code generated by "fzgen github.com/google/syzkaller/pkg/report".

import (
	"testing"

	"github.com/google/syzkaller/pkg/mgrconfig"
	"github.com/google/syzkaller/pkg/report"
	"github.com/google/syzkaller/sys/targets"
	"github.com/thepudds/fzgen/fuzzer"
)

func Fuzz_Reporter_ContainsCrash(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cfg *mgrconfig.Config
		var output []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cfg, &output)
		if cfg == nil {
			return
		}

		reporter, err := report.NewReporter(cfg)
		if err != nil {
			return
		}
		reporter.ContainsCrash(output)
	})
}

func Fuzz_Reporter_Parse(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cfg *mgrconfig.Config
		var output []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cfg, &output)
		if cfg == nil {
			return
		}

		reporter, err := report.NewReporter(cfg)
		if err != nil {
			return
		}
		reporter.Parse(output)
	})
}

func Fuzz_Reporter_ParseFrom(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cfg *mgrconfig.Config
		var output []byte
		var minReportPos int
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cfg, &output, &minReportPos)
		if cfg == nil {
			return
		}

		reporter, err := report.NewReporter(cfg)
		if err != nil {
			return
		}
		reporter.ParseFrom(output, minReportPos)
	})
}

func Fuzz_Reporter_ReportToGuiltyFile(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cfg *mgrconfig.Config
		var title string
		var r3 []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cfg, &title, &r3)
		if cfg == nil {
			return
		}

		reporter, err := report.NewReporter(cfg)
		if err != nil {
			return
		}
		reporter.ReportToGuiltyFile(title, r3)
	})
}

func Fuzz_Reporter_Symbolize(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cfg *mgrconfig.Config
		var rep *report.Report
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cfg, &rep)
		if cfg == nil || rep == nil {
			return
		}

		reporter, err := report.NewReporter(cfg)
		if err != nil {
			return
		}
		reporter.Symbolize(rep)
	})
}

func Fuzz_Report_String(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r report.Report
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&r)

		r.String()
	})
}

func Fuzz_DecompileOpcodes(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var rawOpcodes []byte
		var flags report.DecompilerFlagMask
		var t3 *targets.Target
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&rawOpcodes, &flags, &t3)
		if t3 == nil {
			return
		}

		report.DecompileOpcodes(rawOpcodes, flags, t3)
	})
}

func Fuzz_GetLinuxMaintainers(f *testing.F) {
	f.Fuzz(func(t *testing.T, kernelSrc string, file string) {
		report.GetLinuxMaintainers(kernelSrc, file)
	})
}

func Fuzz_IsSuppressed(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var reporter *report.Reporter
		var output []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&reporter, &output)
		if reporter == nil {
			return
		}

		report.IsSuppressed(reporter, output)
	})
}

func Fuzz_NewReporter(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var cfg *mgrconfig.Config
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&cfg)
		if cfg == nil {
			return
		}

		report.NewReporter(cfg)
	})
}

func Fuzz_ParseAll(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var reporter *report.Reporter
		var output []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&reporter, &output)
		if reporter == nil {
			return
		}

		report.ParseAll(reporter, output)
	})
}

func Fuzz_Truncate(f *testing.F) {
	f.Fuzz(func(t *testing.T, log []byte, begin int, end int) {
		report.Truncate(log, begin, end)
	})
}
