package main

// Edit if desired. Code generated by "fzgen -mocks --mocksPackagePrefix=example --mocksDepth=5 google.golang.org/api/youtube/v3".

import (
	"context"
	mocks "example/mocks/context"
	mocks_1 "example/mocks/google.golang.org/api/googleapi"
	mocks_2 "example/mocks/io"
	mocks_4 "example/mocks/log/slog"
	mocks_3 "example/mocks/net/http"
	"io"
	"log/slog"
	"net/http"
	"net/url"
	"reflect"
	"testing"
	"time"

	"github.com/BelehovEgor/fzgen/fuzzer"
	"github.com/stretchr/testify/mock"
	"google.golang.org/api/googleapi"
	youtube "google.golang.org/api/youtube/v3"
)

// #1

// Example description
// Errors
// Complex struct
// Specific types of errors
// No usage exaple

// Generated
// Fuzzing fail: unexported field urlParams_ is nil and has nil pointer exception
func Fuzz_N16_ActivitiesListCall_Pages_Default(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var ctx context.Context
		var f func(*youtube.ActivityListResponse) error
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&c, &ctx, &f)
		if err != nil || c == nil {
			return
		}

		// Put here your precondition of func arguments...

		c.Pages(ctx, f)

		// Put here your postcondition of func results...
	})
}

// Prompt
/*

You write fuzzing test using golang

Purpose: extend target func result check in fuzzing target

Requirements:
        + return only fuzz target code
        + no explanation
        + you can past code only instead comments like "Put here your"
        + if arguments is invalid, target function shouldn't be call, these cases should be skipped
        + If function return possible response (expected structs, nil, error, panic), these cases should be skipped
        + all unexpected result of the function should create t.Error and stop fuzzing.
        + use simple strings for t.Error or t.Log without any variables format
        + don't use not exported fields in generated code (its starts with lowercase letter)

Target func from package google.golang.org/api/youtube/v3:

func (c *ActivitiesListCall) Pages(ctx context.Context, f func(*ActivityListResponse) error) error {
        c.ctx_ = ctx
        defer c.PageToken(c.urlParams_.Get("pageToken"))
        for {
                x, err := c.Do()
                if err != nil {
                        return err
                }
                if err := f(x); err != nil {
                        return err
                }
                if x.NextPageToken == "" {
                        return nil
                }
                c.PageToken(x.NextPageToken)
        }
}

Current fuzzing target test:

func Fuzz_N16_ActivitiesListCall_Pages(f *testing.F) {
        f.Fuzz(func(t *testing.T, data []byte) {
                var c *youtube.ActivitiesListCall
                var ctx context.Context
                var f func(*youtube.ActivityListResponse) error
                fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
                err := fz.Fill2(&c, &ctx, &f)
                if err != nil || c == nil {
                        return
                }

                // Put here your precondition of func arguments...

                c.Pages(ctx, f)

                // Put here your postcondition of func results...
        })
}

Current import aliases:

import (
        "context"
        mocks "example/mocks/context"
        mocks_1 "example/mocks/google.golang.org/api/googleapi"
        mocks_2 "example/mocks/io"
        mocks_4 "example/mocks/log/slog"
        mocks_3 "example/mocks/net/http"
        "io"
        "log/slog"
        "net/http"
        "net/url"
        "reflect"
        "testing"
        "time"

        "github.com/BelehovEgor/fzgen/fuzzer"
        "github.com/stretchr/testify/mock"
        "google.golang.org/api/googleapi"
        "google.golang.org/api/option"
        youtube "google.golang.org/api/youtube/v3"
)

*/

// #LLM claude-3-7-sonnet-20250219
// count fixes: 0
// #summary:
// valid precondition. But maybe too complex
// valid post condition.
// the expected behavior was violated, the code outside the comment was changed
// fuzzing is successful 28

func Fuzz_N16_ActivitiesListCall_Pages_claude(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var ctx context.Context
		var f func(*youtube.ActivityListResponse) error
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors, fuzzer.FillUnexported)
		err := fz.Fill2(&c, &ctx, &f)
		if err != nil || c == nil || ctx == nil || f == nil {
			return
		}

		// Skip invalid cases where c.urlParams_ might be nil
		if reflect.ValueOf(c).Elem().FieldByName("urlParams_").IsNil() {
			return
		}

		// Track if function was executed as expected
		executed := false
		errorReturned := false

		mockF := func(resp *youtube.ActivityListResponse) error {
			executed = true
			if resp == nil {
				t.Error("ActivityListResponse is nil")
				return nil
			}
			return nil
		}

		err = c.Pages(ctx, mockF)
		if err != nil {
			errorReturned = true
		}

		// Verify expected behavior
		if !executed && !errorReturned {
			t.Error("Function did not execute callback or return error")
		}
	})
}

// Would you like me to explain or break down the code?

// #LLM claude-3-7-sonnet-20250219-thinking-32k
// count fixes: 0
// #summary:
// valid precondition.
// valid postcondition.
// fuzzing failed as generated test
func Fuzz_N16_ActivitiesListCall_Pages_claude_thinking(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var ctx context.Context
		var f func(*youtube.ActivityListResponse) error
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&c, &ctx, &f)
		if err != nil || c == nil {
			return
		}

		if ctx == nil || f == nil {
			return
		}

		err = c.Pages(ctx, f)

		// Skip normal cases - either nil error or any error is expected behavior
	})
}

// #LLM chatgpt-4o-latest-20250129
// count fixes: 0
// #summary:
// valid precondition. Extra check
// valid post condition - unexist possible error message check.
// Fuzzing fail: unexported field urlParams_ is nil and has nil pointer exception

func Fuzz_N16_ActivitiesListCall_Pages_gpt(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var ctx context.Context
		var fn func(*youtube.ActivityListResponse) error
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&c, &ctx, &fn)
		if err != nil || c == nil || fn == nil || ctx == nil {
			return
		}

		err = c.Pages(ctx, fn)

		if err != nil && err != io.EOF && err != context.Canceled && err != context.DeadlineExceeded {
			t.Error("unexpected error")
			t.FailNow()
		}
	})
}

// #2
// Example description
// Error or nil
// Array of args
// No usage example
func Fuzz_N673_VideosReportAbuseCall_Do_default(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosReportAbuseCall
		var opts []googleapi.CallOption
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&c, &opts)
		if err != nil || c == nil {
			return
		}

		// Put here your precondition of func arguments...

		c.Do(opts...)

		// Put here your postcondition of func results...
	})
}

// Prompt
/*
You write fuzzing test using golang

Purpose: extend target func result check in fuzzing target

Requirements:
        + return only fuzz target code
        + you can past code only instead comments like "Put here your"
        + no explanation
        + process all edge cases
        + if arguments is invalid, target function shouldn't be call, this case should be skipped
        + if there is an explicit exception creation, skip only them by their message, the rest should cause a fuzzing test error
        + situations that should not occur during the execution of the function should end with t.Error
        + use simple strings for t.Error or t.Log without any variables format
        + don't use not exported fields in validation checks (its starts with lowercase letter)

Target func from package google.golang.org/api/youtube/v3:

func (c *VideosReportAbuseCall) Do(opts ...googleapi.CallOption) error {
        gensupport.SetOptions(c.urlParams_, opts...)
        res, err := c.doRequest("json")
        if err != nil {
                return err
        }
        defer googleapi.CloseBody(res)
        if err := googleapi.CheckResponse(res); err != nil {
                return gensupport.WrapError(err)
        }
        c.s.logger.DebugContext(c.ctx_, "api response", "serviceName", apiName, "rpcName", "youtube.videos.reportAbuse", "response", internallog.HTTPResponse(res, nil))
        return nil
}

Current fuzzing target test:

func Fuzz_N673_VideosReportAbuseCall_Do(f *testing.F) {
        f.Fuzz(func(t *testing.T, data []byte) {
                var c *youtube.VideosReportAbuseCall
                var opts []googleapi.CallOption
                fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
                err := fz.Fill2(&c, &opts)
                if err != nil || c == nil {
                        return
                }

                // Put here your precondition of func arguments...

                c.Do(opts...)

                // Put here your postcondition of func results...
        })
}

Current import aliases:

import (
        "context"
        mocks "example/mocks/context"
        mocks_1 "example/mocks/google.golang.org/api/googleapi"
        mocks_5 "example/mocks/google.golang.org/api/option"
        mocks_2 "example/mocks/io"
        mocks_4 "example/mocks/log/slog"
        mocks_3 "example/mocks/net/http"
        "io"
        "log/slog"
        "net/http"
        "net/url"
        "reflect"
        "testing"
        "time"

        "github.com/BelehovEgor/fzgen/fuzzer"
        "github.com/stretchr/testify/mock"
        "google.golang.org/api/googleapi"
        "google.golang.org/api/internal"
        "google.golang.org/api/option"
        youtube "google.golang.org/api/youtube/v3"
)
*/

// #LLM claude-3-7-sonnet-20250219
// count fixes: 1
// hallucinations
// broken struct of fuzz method
// #summary:
// invalid precondition. hallucinations
// valid post condition.
// mocks in import -> trying use mock to broke fuzz func
func Fuzz_N673_VideosReportAbuseCall_Do_cloude(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosReportAbuseCall
		var opts []googleapi.CallOption
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&c, &opts)
		if err != nil || c == nil {
			return
		}

		// if c.URLParams() == nil {
		// 		return
		// }

		//mockRes := &http.Response{}
		// mockDoRequest := func(alt string) (*http.Response, error) {
		// 		if alt != "json" {
		// 				t.Error("Unexpected alt format in doRequest")
		// 				return nil, nil
		// 		}
		// 		return mockRes, nil
		// }

		// Replace the doRequest method
		//c.SetDoRequestFunc(mockDoRequest)

		// Test case: doRequest returns an error
		// mockErrDoRequest := func(alt string) (*http.Response, error) {
		// 		return nil, fmt.Errorf("doRequest error")
		// }
		//c.SetDoRequestFunc(mockErrDoRequest)
		err = c.Do(opts...)
		// if err == nil {
		// 		t.Error("Expected error when doRequest fails, but got nil")
		// }

		// Test case: CheckResponse returns an error
		// mockRes.StatusCode = http.StatusBadRequest
		// c.SetDoRequestFunc(mockDoRequest)
		// err = c.Do(opts...)
		// if err == nil {
		// 		t.Error("Expected error when CheckResponse fails, but got nil")
		// }

		// // Test case: Success path
		// mockRes.StatusCode = http.StatusOK
		// c.SetDoRequestFunc(mockDoRequest)
		// err = c.Do(opts...)
		// if err != nil {
		// 		t.Error("Expected success but got error")
		// }
	})
}

// #LLM claude-3-7-sonnet-20250219-thinking-32k
// count fixes: 0
// #summary:
// valid precondition. Invalid created struct
// valid postcondition.
// fuzzing faild
func Fuzz_N673_VideosReportAbuseCall_Do_claude_thinking(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosReportAbuseCall
		var opts []googleapi.CallOption
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&c, &opts)
		if err != nil || c == nil {
			return
		}

		defer func() {
			if r := recover(); r != nil {
				t.Error("VideosReportAbuseCall.Do() panicked unexpectedly")
			}
		}()

		err = c.Do(opts...)

		// No need to check for errors as they are expected return values
	})
}

// #LLM chatgpt-4o-latest-20250129
// count fixes: 0
// #summary:
// invalid precondition.
// invalid post condition
// mocks in import -> trying use mock to broke fuzz func

func Fuzz_N673_VideosReportAbuseCall_Do(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosReportAbuseCall
		var opts []googleapi.CallOption
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&c, &opts)
		if err != nil || c == nil { //|| c.s == nil || c.s.client == nil || c.urlParams_ == nil {
			return
		}

		// res := &http.Response{
		// 	Body:       io.NopCloser(&mocks_2.Reader{}),
		// 	StatusCode: http.StatusOK,
		// }

		// mocks_3.OnDo(c.s.client, mock.Anything).Return(res, nil).Once()
		// mocks_1.OnCheckResponse(res).Return(nil).Once()

		err = c.Do(opts...)

		// if err != nil {
		// 	if gensupport.IsExplicitlyWrappedError(err) {
		// 		return
		// 	}
		// 	t.Error("unexpected error")
		// }
	})
}

// Fabrics

func fabric_mock_interface_7_ReaderAt(
	t *testing.T,
	n int,
	err error,
) io.ReaderAt {
	genMock := mocks_2.NewMockReaderAt(t)
	genMock.
		On("ReadAt", mock.AnythingOfType("[]byte"), mock.AnythingOfType("int64")).
		Return(func(p []byte, off int64) (n int, err error) {
			return n, err
		}).
		Maybe()
	return genMock
}

func fabric_mock_interface_4_Reader(
	t *testing.T,
	n int,
	err error,
) io.Reader {
	genMock := mocks_2.NewMockReader(t)
	genMock.
		On("Read", mock.AnythingOfType("[]byte")).
		Return(func(p []byte) (n int, err error) {
			return n, err
		}).
		Maybe()
	return genMock
}

func fabric_mock_interface_33_Handler(
	t *testing.T,
	bool_ bool,
	error_ error,
	handler_ slog.Handler,
	handler__1 slog.Handler,
) slog.Handler {
	genMock := mocks_4.NewMockHandler(t)
	genMock.
		On("Enabled", mock.AnythingOfType("context.Context"), mock.AnythingOfType("slog.Level")).
		Return(func(context.Context, slog.Level) bool {
			return bool_
		}).
		Maybe()
	genMock.
		On("Handle", mock.AnythingOfType("context.Context"), mock.AnythingOfType("slog.Record")).
		Return(func(context.Context, slog.Record) error {
			return error_
		}).
		Maybe()
	genMock.
		On("WithAttrs", mock.AnythingOfType("[]slog.Attr")).
		Return(func(attrs []slog.Attr) slog.Handler {
			return handler_
		}).
		Maybe()
	genMock.
		On("WithGroup", mock.AnythingOfType("string")).
		Return(func(name string) slog.Handler {
			return handler__1
		}).
		Maybe()
	return genMock
}

func fabric_mock_interface_32_CookieJar(
	t *testing.T,
	cookie_ []*http.Cookie,
) http.CookieJar {
	genMock := mocks_3.NewMockCookieJar(t)
	genMock.
		On("Cookies", mock.AnythingOfType("*url.URL")).
		Return(func(u *url.URL) []*http.Cookie {
			return cookie_
		}).
		Maybe()
	genMock.
		On("SetCookies", mock.AnythingOfType("*url.URL"), mock.AnythingOfType("[]*http.Cookie")).
		Return(func(u *url.URL, cookies []*http.Cookie) {
			return
		}).
		Maybe()
	return genMock
}

func fabric_mock_interface_30_RoundTripper(
	t *testing.T,
	response_ *http.Response,
	error_ error,
) http.RoundTripper {
	genMock := mocks_3.NewMockRoundTripper(t)
	genMock.
		On("RoundTrip", mock.AnythingOfType("*http.Request")).
		Return(func(*http.Request) (*http.Response, error) {
			return response_, error_
		}).
		Maybe()
	return genMock
}

func fabric_mock_interface_2_CallOption(
	t *testing.T,
	key string,
	value string,
) googleapi.CallOption {
	genMock := mocks_1.NewMockCallOption(t)
	genMock.
		On("Get").
		Return(func() (key string, value string) {
			return key, value
		}).
		Maybe()
	return genMock
}

func fabric_mock_interface_1_Context(
	t *testing.T,
	deadline time.Time,
	ok bool,
	error_ error,
) context.Context {
	genMock := mocks.NewMockContext(t)
	genMock.
		On("Deadline").
		Return(func() (deadline time.Time, ok bool) {
			return deadline, ok
		}).
		Maybe()
	genMock.
		On("Err").
		Return(func() error {
			return error_
		}).
		Maybe()
	return genMock
}

func fabric_mock_func_31(error_ error) func(*http.Request, []*http.Request) error {
	return func(*http.Request, []*http.Request) error {
		return error_
	}
}

func fabric_mock_func_3(error_ error) func(*youtube.ActivityListResponse) error {
	return func(*youtube.ActivityListResponse) error {
		return error_
	}
}

func fabric_mock_func_29() googleapi.ProgressUpdater {
	return func(int64, int64) {
		return
	}
}

func fabric_mock_func_28(error_ error) func(*youtube.VideoListResponse) error {
	return func(*youtube.VideoListResponse) error {
		return error_
	}
}

func fabric_mock_func_25(error_ error) func(*youtube.SuperChatEventListResponse) error {
	return func(*youtube.SuperChatEventListResponse) error {
		return error_
	}
}

func fabric_mock_func_24(error_ error) func(*youtube.SubscriptionListResponse) error {
	return func(*youtube.SubscriptionListResponse) error {
		return error_
	}
}

func fabric_mock_func_23(error_ error) func(*youtube.SearchListResponse) error {
	return func(*youtube.SearchListResponse) error {
		return error_
	}
}

func fabric_mock_func_22(error_ error) func(*youtube.PlaylistListResponse) error {
	return func(*youtube.PlaylistListResponse) error {
		return error_
	}
}

func fabric_mock_func_21(error_ error) func(*youtube.PlaylistItemListResponse) error {
	return func(*youtube.PlaylistItemListResponse) error {
		return error_
	}
}

func fabric_mock_func_19(error_ error) func(*youtube.PlaylistImageListResponse) error {
	return func(*youtube.PlaylistImageListResponse) error {
		return error_
	}
}

func fabric_mock_func_17(error_ error) func(*youtube.MemberListResponse) error {
	return func(*youtube.MemberListResponse) error {
		return error_
	}
}

func fabric_mock_func_16(error_ error) func(*youtube.LiveStreamListResponse) error {
	return func(*youtube.LiveStreamListResponse) error {
		return error_
	}
}

func fabric_mock_func_15(error_ error) func(*youtube.LiveChatModeratorListResponse) error {
	return func(*youtube.LiveChatModeratorListResponse) error {
		return error_
	}
}

func fabric_mock_func_14(error_ error) func(*youtube.LiveChatMessageListResponse) error {
	return func(*youtube.LiveChatMessageListResponse) error {
		return error_
	}
}

func fabric_mock_func_13(error_ error) func(*youtube.LiveBroadcastListResponse) error {
	return func(*youtube.LiveBroadcastListResponse) error {
		return error_
	}
}

func fabric_mock_func_12(error_ error) func(*youtube.CommentListResponse) error {
	return func(*youtube.CommentListResponse) error {
		return error_
	}
}

func fabric_mock_func_11(error_ error) func(*youtube.CommentThreadListResponse) error {
	return func(*youtube.CommentThreadListResponse) error {
		return error_
	}
}

func fabric_mock_func_10(error_ error) func(*youtube.ChannelListResponse) error {
	return func(*youtube.ChannelListResponse) error {
		return error_
	}
}

var FabricFuncsForCustomTypes map[string][]reflect.Value

func TestMain(m *testing.M) {
	FabricFuncsForCustomTypes = make(map[string][]reflect.Value)
	FabricFuncsForCustomTypes["func(*http.Request,[]*http.Request)error"] = append(FabricFuncsForCustomTypes["func(*http.Request,[]*http.Request)error"], reflect.ValueOf(fabric_mock_func_31))
	FabricFuncsForCustomTypes["func(*youtube.VideoListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.VideoListResponse)error"], reflect.ValueOf(fabric_mock_func_28))
	FabricFuncsForCustomTypes["googleapi.CallOption"] = append(FabricFuncsForCustomTypes["googleapi.CallOption"], reflect.ValueOf(fabric_mock_interface_2_CallOption))
	FabricFuncsForCustomTypes["func(*youtube.PlaylistListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.PlaylistListResponse)error"], reflect.ValueOf(fabric_mock_func_22))
	FabricFuncsForCustomTypes["func(*youtube.SuperChatEventListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.SuperChatEventListResponse)error"], reflect.ValueOf(fabric_mock_func_25))
	FabricFuncsForCustomTypes["func(*youtube.MemberListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.MemberListResponse)error"], reflect.ValueOf(fabric_mock_func_17))
	FabricFuncsForCustomTypes["io.ReaderAt"] = append(FabricFuncsForCustomTypes["io.ReaderAt"], reflect.ValueOf(fabric_mock_interface_7_ReaderAt))
	FabricFuncsForCustomTypes["func(*youtube.CommentListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.CommentListResponse)error"], reflect.ValueOf(fabric_mock_func_12))
	FabricFuncsForCustomTypes["func(*youtube.SubscriptionListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.SubscriptionListResponse)error"], reflect.ValueOf(fabric_mock_func_24))
	FabricFuncsForCustomTypes["context.Context"] = append(FabricFuncsForCustomTypes["context.Context"], reflect.ValueOf(fabric_mock_interface_1_Context))
	FabricFuncsForCustomTypes["http.RoundTripper"] = append(FabricFuncsForCustomTypes["http.RoundTripper"], reflect.ValueOf(fabric_mock_interface_30_RoundTripper))
	FabricFuncsForCustomTypes["func(*youtube.ActivityListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.ActivityListResponse)error"], reflect.ValueOf(fabric_mock_func_3))
	FabricFuncsForCustomTypes["func(*youtube.ChannelListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.ChannelListResponse)error"], reflect.ValueOf(fabric_mock_func_10))
	FabricFuncsForCustomTypes["func(*youtube.LiveStreamListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.LiveStreamListResponse)error"], reflect.ValueOf(fabric_mock_func_16))
	FabricFuncsForCustomTypes["func(*youtube.LiveChatMessageListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.LiveChatMessageListResponse)error"], reflect.ValueOf(fabric_mock_func_14))
	FabricFuncsForCustomTypes["func(*youtube.SearchListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.SearchListResponse)error"], reflect.ValueOf(fabric_mock_func_23))
	FabricFuncsForCustomTypes["http.CookieJar"] = append(FabricFuncsForCustomTypes["http.CookieJar"], reflect.ValueOf(fabric_mock_interface_32_CookieJar))
	FabricFuncsForCustomTypes["func(*youtube.PlaylistItemListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.PlaylistItemListResponse)error"], reflect.ValueOf(fabric_mock_func_21))
	FabricFuncsForCustomTypes["func(*youtube.CommentThreadListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.CommentThreadListResponse)error"], reflect.ValueOf(fabric_mock_func_11))
	FabricFuncsForCustomTypes["googleapi.ProgressUpdater"] = append(FabricFuncsForCustomTypes["googleapi.ProgressUpdater"], reflect.ValueOf(fabric_mock_func_29))
	FabricFuncsForCustomTypes["func(*youtube.LiveChatModeratorListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.LiveChatModeratorListResponse)error"], reflect.ValueOf(fabric_mock_func_15))
	FabricFuncsForCustomTypes["slog.Handler"] = append(FabricFuncsForCustomTypes["slog.Handler"], reflect.ValueOf(fabric_mock_interface_33_Handler))
	FabricFuncsForCustomTypes["func(*youtube.PlaylistImageListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.PlaylistImageListResponse)error"], reflect.ValueOf(fabric_mock_func_19))
	FabricFuncsForCustomTypes["func(*youtube.LiveBroadcastListResponse)error"] = append(FabricFuncsForCustomTypes["func(*youtube.LiveBroadcastListResponse)error"], reflect.ValueOf(fabric_mock_func_13))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(fabric_mock_interface_4_Reader))
	FabricFuncsForCustomTypes["youtube.YoutubeV3Service"] = append(FabricFuncsForCustomTypes["youtube.YoutubeV3Service"], reflect.ValueOf(youtube.NewYoutubeV3Service))
	FabricFuncsForCustomTypes["youtube.YoutubeService"] = append(FabricFuncsForCustomTypes["youtube.YoutubeService"], reflect.ValueOf(youtube.NewYoutubeService))
	FabricFuncsForCustomTypes["youtube.WatermarksService"] = append(FabricFuncsForCustomTypes["youtube.WatermarksService"], reflect.ValueOf(youtube.NewWatermarksService))
	FabricFuncsForCustomTypes["youtube.VideosService"] = append(FabricFuncsForCustomTypes["youtube.VideosService"], reflect.ValueOf(youtube.NewVideosService))
	FabricFuncsForCustomTypes["youtube.VideoTrainabilityService"] = append(FabricFuncsForCustomTypes["youtube.VideoTrainabilityService"], reflect.ValueOf(youtube.NewVideoTrainabilityService))
	FabricFuncsForCustomTypes["youtube.VideoCategoriesService"] = append(FabricFuncsForCustomTypes["youtube.VideoCategoriesService"], reflect.ValueOf(youtube.NewVideoCategoriesService))
	FabricFuncsForCustomTypes["youtube.VideoAbuseReportReasonsService"] = append(FabricFuncsForCustomTypes["youtube.VideoAbuseReportReasonsService"], reflect.ValueOf(youtube.NewVideoAbuseReportReasonsService))
	FabricFuncsForCustomTypes["youtube.ThumbnailsService"] = append(FabricFuncsForCustomTypes["youtube.ThumbnailsService"], reflect.ValueOf(youtube.NewThumbnailsService))
	FabricFuncsForCustomTypes["youtube.ThirdPartyLinksService"] = append(FabricFuncsForCustomTypes["youtube.ThirdPartyLinksService"], reflect.ValueOf(youtube.NewThirdPartyLinksService))
	FabricFuncsForCustomTypes["youtube.TestsService"] = append(FabricFuncsForCustomTypes["youtube.TestsService"], reflect.ValueOf(youtube.NewTestsService))
	FabricFuncsForCustomTypes["youtube.SuperChatEventsService"] = append(FabricFuncsForCustomTypes["youtube.SuperChatEventsService"], reflect.ValueOf(youtube.NewSuperChatEventsService))
	FabricFuncsForCustomTypes["youtube.SubscriptionsService"] = append(FabricFuncsForCustomTypes["youtube.SubscriptionsService"], reflect.ValueOf(youtube.NewSubscriptionsService))
	FabricFuncsForCustomTypes["youtube.SearchService"] = append(FabricFuncsForCustomTypes["youtube.SearchService"], reflect.ValueOf(youtube.NewSearchService))
	FabricFuncsForCustomTypes["youtube.PlaylistsService"] = append(FabricFuncsForCustomTypes["youtube.PlaylistsService"], reflect.ValueOf(youtube.NewPlaylistsService))
	FabricFuncsForCustomTypes["youtube.PlaylistItemsService"] = append(FabricFuncsForCustomTypes["youtube.PlaylistItemsService"], reflect.ValueOf(youtube.NewPlaylistItemsService))
	FabricFuncsForCustomTypes["youtube.PlaylistImagesService"] = append(FabricFuncsForCustomTypes["youtube.PlaylistImagesService"], reflect.ValueOf(youtube.NewPlaylistImagesService))
	FabricFuncsForCustomTypes["youtube.MembershipsLevelsService"] = append(FabricFuncsForCustomTypes["youtube.MembershipsLevelsService"], reflect.ValueOf(youtube.NewMembershipsLevelsService))
	FabricFuncsForCustomTypes["youtube.MembersService"] = append(FabricFuncsForCustomTypes["youtube.MembersService"], reflect.ValueOf(youtube.NewMembersService))
	FabricFuncsForCustomTypes["youtube.LiveStreamsService"] = append(FabricFuncsForCustomTypes["youtube.LiveStreamsService"], reflect.ValueOf(youtube.NewLiveStreamsService))
	FabricFuncsForCustomTypes["youtube.LiveChatModeratorsService"] = append(FabricFuncsForCustomTypes["youtube.LiveChatModeratorsService"], reflect.ValueOf(youtube.NewLiveChatModeratorsService))
	FabricFuncsForCustomTypes["youtube.LiveChatMessagesService"] = append(FabricFuncsForCustomTypes["youtube.LiveChatMessagesService"], reflect.ValueOf(youtube.NewLiveChatMessagesService))
	FabricFuncsForCustomTypes["youtube.LiveChatBansService"] = append(FabricFuncsForCustomTypes["youtube.LiveChatBansService"], reflect.ValueOf(youtube.NewLiveChatBansService))
	FabricFuncsForCustomTypes["youtube.LiveBroadcastsService"] = append(FabricFuncsForCustomTypes["youtube.LiveBroadcastsService"], reflect.ValueOf(youtube.NewLiveBroadcastsService))
	FabricFuncsForCustomTypes["youtube.I18nRegionsService"] = append(FabricFuncsForCustomTypes["youtube.I18nRegionsService"], reflect.ValueOf(youtube.NewI18nRegionsService))
	FabricFuncsForCustomTypes["youtube.I18nLanguagesService"] = append(FabricFuncsForCustomTypes["youtube.I18nLanguagesService"], reflect.ValueOf(youtube.NewI18nLanguagesService))
	FabricFuncsForCustomTypes["youtube.CommentsService"] = append(FabricFuncsForCustomTypes["youtube.CommentsService"], reflect.ValueOf(youtube.NewCommentsService))
	FabricFuncsForCustomTypes["youtube.CommentThreadsService"] = append(FabricFuncsForCustomTypes["youtube.CommentThreadsService"], reflect.ValueOf(youtube.NewCommentThreadsService))
	FabricFuncsForCustomTypes["youtube.ChannelsService"] = append(FabricFuncsForCustomTypes["youtube.ChannelsService"], reflect.ValueOf(youtube.NewChannelsService))
	FabricFuncsForCustomTypes["youtube.ChannelSectionsService"] = append(FabricFuncsForCustomTypes["youtube.ChannelSectionsService"], reflect.ValueOf(youtube.NewChannelSectionsService))
	FabricFuncsForCustomTypes["youtube.ChannelBannersService"] = append(FabricFuncsForCustomTypes["youtube.ChannelBannersService"], reflect.ValueOf(youtube.NewChannelBannersService))
	FabricFuncsForCustomTypes["youtube.CaptionsService"] = append(FabricFuncsForCustomTypes["youtube.CaptionsService"], reflect.ValueOf(youtube.NewCaptionsService))
	FabricFuncsForCustomTypes["youtube.ActivitiesService"] = append(FabricFuncsForCustomTypes["youtube.ActivitiesService"], reflect.ValueOf(youtube.NewActivitiesService))
	FabricFuncsForCustomTypes["youtube.AbuseReportsService"] = append(FabricFuncsForCustomTypes["youtube.AbuseReportsService"], reflect.ValueOf(youtube.NewAbuseReportsService))
	FabricFuncsForCustomTypes["youtube.Service"] = append(FabricFuncsForCustomTypes["youtube.Service"], reflect.ValueOf(youtube.New))
	m.Run()
}
