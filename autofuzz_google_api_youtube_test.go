package main

// Edit if desired. Code generated by "fzgen google.golang.org/api/youtube/v3".

import (
	"context"
	"io"
	"net/http"
	"testing"

	"github.com/thepudds/fzgen/fuzzer"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/youtube/v3"
)

func Fuzz_AbuseReportsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.AbuseReportsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_AbuseReportsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_AbuseReportsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.AbuseReportsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_AbuseReportsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.AbuseReportsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_AbuseReportsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var abusereport *youtube.AbuseReport
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &abusereport)
		if s == nil || abusereport == nil {
			return
		}

		r := youtube.NewAbuseReportsService(s)
		r.Insert(part, abusereport)
	})
}

func Fuzz_ActivitiesListCall_ChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var channelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &channelId)
		if c == nil {
			return
		}

		c.ChannelId(channelId)
	})
}

func Fuzz_ActivitiesListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ActivitiesListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ActivitiesListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ActivitiesListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ActivitiesListCall_Home(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var home bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &home)
		if c == nil {
			return
		}

		c.Home(home)
	})
}

func Fuzz_ActivitiesListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_ActivitiesListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_ActivitiesListCall_Mine(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var mine bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mine)
		if c == nil {
			return
		}

		c.Mine(mine)
	})
}

func Fuzz_ActivitiesListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_ActivitiesListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.ActivityListResponse) error

func Fuzz_ActivitiesListCall_PublishedAfter(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var publishedAfter string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &publishedAfter)
		if c == nil {
			return
		}

		c.PublishedAfter(publishedAfter)
	})
}

func Fuzz_ActivitiesListCall_PublishedBefore(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var publishedBefore string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &publishedBefore)
		if c == nil {
			return
		}

		c.PublishedBefore(publishedBefore)
	})
}

func Fuzz_ActivitiesListCall_RegionCode(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ActivitiesListCall
		var regionCode string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &regionCode)
		if c == nil {
			return
		}

		c.RegionCode(regionCode)
	})
}

func Fuzz_ActivitiesService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewActivitiesService(s)
		r.List(part)
	})
}

func Fuzz_CaptionsDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CaptionsDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CaptionsDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CaptionsDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CaptionsDeleteCall_OnBehalfOf(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDeleteCall
		var onBehalfOf string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOf)
		if c == nil {
			return
		}

		c.OnBehalfOf(onBehalfOf)
	})
}

func Fuzz_CaptionsDeleteCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDeleteCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_CaptionsDownloadCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDownloadCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CaptionsDownloadCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

// skipping Fuzz_CaptionsDownloadCall_Download because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CaptionsDownloadCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDownloadCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CaptionsDownloadCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDownloadCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CaptionsDownloadCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDownloadCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_CaptionsDownloadCall_OnBehalfOf(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDownloadCall
		var onBehalfOf string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOf)
		if c == nil {
			return
		}

		c.OnBehalfOf(onBehalfOf)
	})
}

func Fuzz_CaptionsDownloadCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDownloadCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_CaptionsDownloadCall_Tfmt(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDownloadCall
		var tfmt string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &tfmt)
		if c == nil {
			return
		}

		c.Tfmt(tfmt)
	})
}

func Fuzz_CaptionsDownloadCall_Tlang(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsDownloadCall
		var tlang string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &tlang)
		if c == nil {
			return
		}

		c.Tlang(tlang)
	})
}

func Fuzz_CaptionsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CaptionsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CaptionsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CaptionsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

// skipping Fuzz_CaptionsInsertCall_Media because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.MediaOption

func Fuzz_CaptionsInsertCall_OnBehalfOf(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsInsertCall
		var onBehalfOf string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOf)
		if c == nil {
			return
		}

		c.OnBehalfOf(onBehalfOf)
	})
}

func Fuzz_CaptionsInsertCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsInsertCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

// skipping Fuzz_CaptionsInsertCall_ProgressUpdater because parameters include func, chan, or unsupported interface: google.golang.org/api/googleapi.ProgressUpdater

func Fuzz_CaptionsInsertCall_ResumableMedia(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsInsertCall
		var ctx context.Context
		var r io.ReaderAt
		var size int64
		var mediaType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx, &r, &size, &mediaType)
		if c == nil {
			return
		}

		c.ResumableMedia(ctx, r, size, mediaType)
	})
}

func Fuzz_CaptionsInsertCall_Sync(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsInsertCall
		var sync bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &sync)
		if c == nil {
			return
		}

		c.Sync(sync)
	})
}

func Fuzz_CaptionsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CaptionsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CaptionsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CaptionsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CaptionsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_CaptionsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_CaptionsListCall_OnBehalfOf(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsListCall
		var onBehalfOf string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOf)
		if c == nil {
			return
		}

		c.OnBehalfOf(onBehalfOf)
	})
}

func Fuzz_CaptionsListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_CaptionsService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewCaptionsService(s)
		r.Delete(id)
	})
}

func Fuzz_CaptionsService_Download(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewCaptionsService(s)
		r.Download(id)
	})
}

func Fuzz_CaptionsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var caption *youtube.Caption
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &caption)
		if s == nil || caption == nil {
			return
		}

		r := youtube.NewCaptionsService(s)
		r.Insert(part, caption)
	})
}

func Fuzz_CaptionsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var videoId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &videoId)
		if s == nil {
			return
		}

		r := youtube.NewCaptionsService(s)
		r.List(part, videoId)
	})
}

func Fuzz_CaptionsService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var caption *youtube.Caption
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &caption)
		if s == nil || caption == nil {
			return
		}

		r := youtube.NewCaptionsService(s)
		r.Update(part, caption)
	})
}

func Fuzz_CaptionsUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CaptionsUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CaptionsUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CaptionsUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

// skipping Fuzz_CaptionsUpdateCall_Media because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.MediaOption

func Fuzz_CaptionsUpdateCall_OnBehalfOf(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsUpdateCall
		var onBehalfOf string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOf)
		if c == nil {
			return
		}

		c.OnBehalfOf(onBehalfOf)
	})
}

func Fuzz_CaptionsUpdateCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsUpdateCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

// skipping Fuzz_CaptionsUpdateCall_ProgressUpdater because parameters include func, chan, or unsupported interface: google.golang.org/api/googleapi.ProgressUpdater

func Fuzz_CaptionsUpdateCall_ResumableMedia(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsUpdateCall
		var ctx context.Context
		var r io.ReaderAt
		var size int64
		var mediaType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx, &r, &size, &mediaType)
		if c == nil {
			return
		}

		c.ResumableMedia(ctx, r, size, mediaType)
	})
}

func Fuzz_CaptionsUpdateCall_Sync(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CaptionsUpdateCall
		var sync bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &sync)
		if c == nil {
			return
		}

		c.Sync(sync)
	})
}

func Fuzz_ChannelBannersInsertCall_ChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelBannersInsertCall
		var channelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &channelId)
		if c == nil {
			return
		}

		c.ChannelId(channelId)
	})
}

func Fuzz_ChannelBannersInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelBannersInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ChannelBannersInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ChannelBannersInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelBannersInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ChannelBannersInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelBannersInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

// skipping Fuzz_ChannelBannersInsertCall_Media because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.MediaOption

func Fuzz_ChannelBannersInsertCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelBannersInsertCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_ChannelBannersInsertCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelBannersInsertCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

// skipping Fuzz_ChannelBannersInsertCall_ProgressUpdater because parameters include func, chan, or unsupported interface: google.golang.org/api/googleapi.ProgressUpdater

func Fuzz_ChannelBannersInsertCall_ResumableMedia(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelBannersInsertCall
		var ctx context.Context
		var r io.ReaderAt
		var size int64
		var mediaType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx, &r, &size, &mediaType)
		if c == nil {
			return
		}

		c.ResumableMedia(ctx, r, size, mediaType)
	})
}

func Fuzz_ChannelBannersService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var channelbannerresource *youtube.ChannelBannerResource
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &channelbannerresource)
		if s == nil || channelbannerresource == nil {
			return
		}

		r := youtube.NewChannelBannersService(s)
		r.Insert(channelbannerresource)
	})
}

func Fuzz_ChannelSectionsDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ChannelSectionsDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ChannelSectionsDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ChannelSectionsDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ChannelSectionsDeleteCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsDeleteCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_ChannelSectionsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ChannelSectionsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ChannelSectionsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ChannelSectionsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ChannelSectionsInsertCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsInsertCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_ChannelSectionsInsertCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsInsertCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_ChannelSectionsListCall_ChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsListCall
		var channelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &channelId)
		if c == nil {
			return
		}

		c.ChannelId(channelId)
	})
}

func Fuzz_ChannelSectionsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ChannelSectionsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ChannelSectionsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ChannelSectionsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ChannelSectionsListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_ChannelSectionsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_ChannelSectionsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_ChannelSectionsListCall_Mine(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsListCall
		var mine bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mine)
		if c == nil {
			return
		}

		c.Mine(mine)
	})
}

func Fuzz_ChannelSectionsListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_ChannelSectionsService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewChannelSectionsService(s)
		r.Delete(id)
	})
}

func Fuzz_ChannelSectionsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var channelsection *youtube.ChannelSection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &channelsection)
		if s == nil || channelsection == nil {
			return
		}

		r := youtube.NewChannelSectionsService(s)
		r.Insert(part, channelsection)
	})
}

func Fuzz_ChannelSectionsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewChannelSectionsService(s)
		r.List(part)
	})
}

func Fuzz_ChannelSectionsService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var channelsection *youtube.ChannelSection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &channelsection)
		if s == nil || channelsection == nil {
			return
		}

		r := youtube.NewChannelSectionsService(s)
		r.Update(part, channelsection)
	})
}

func Fuzz_ChannelSectionsUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ChannelSectionsUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ChannelSectionsUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ChannelSectionsUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ChannelSectionsUpdateCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelSectionsUpdateCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_ChannelsListCall_CategoryId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var categoryId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &categoryId)
		if c == nil {
			return
		}

		c.CategoryId(categoryId)
	})
}

func Fuzz_ChannelsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ChannelsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ChannelsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ChannelsListCall_ForHandle(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var forHandle string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &forHandle)
		if c == nil {
			return
		}

		c.ForHandle(forHandle)
	})
}

func Fuzz_ChannelsListCall_ForUsername(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var forUsername string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &forUsername)
		if c == nil {
			return
		}

		c.ForUsername(forUsername)
	})
}

func Fuzz_ChannelsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ChannelsListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_ChannelsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_ChannelsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_ChannelsListCall_ManagedByMe(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var managedByMe bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &managedByMe)
		if c == nil {
			return
		}

		c.ManagedByMe(managedByMe)
	})
}

func Fuzz_ChannelsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_ChannelsListCall_Mine(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var mine bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mine)
		if c == nil {
			return
		}

		c.Mine(mine)
	})
}

func Fuzz_ChannelsListCall_MySubscribers(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var mySubscribers bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mySubscribers)
		if c == nil {
			return
		}

		c.MySubscribers(mySubscribers)
	})
}

func Fuzz_ChannelsListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_ChannelsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_ChannelsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.ChannelListResponse) error

func Fuzz_ChannelsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewChannelsService(s)
		r.List(part)
	})
}

func Fuzz_ChannelsService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var channel *youtube.Channel
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &channel)
		if s == nil || channel == nil {
			return
		}

		r := youtube.NewChannelsService(s)
		r.Update(part, channel)
	})
}

func Fuzz_ChannelsUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ChannelsUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ChannelsUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ChannelsUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ChannelsUpdateCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ChannelsUpdateCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_CommentThreadsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CommentThreadsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CommentThreadsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CommentThreadsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CommentThreadsListCall_AllThreadsRelatedToChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var allThreadsRelatedToChannelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &allThreadsRelatedToChannelId)
		if c == nil {
			return
		}

		c.AllThreadsRelatedToChannelId(allThreadsRelatedToChannelId)
	})
}

func Fuzz_CommentThreadsListCall_ChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var channelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &channelId)
		if c == nil {
			return
		}

		c.ChannelId(channelId)
	})
}

func Fuzz_CommentThreadsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CommentThreadsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CommentThreadsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CommentThreadsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CommentThreadsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_CommentThreadsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_CommentThreadsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_CommentThreadsListCall_ModerationStatus(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var moderationStatus string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &moderationStatus)
		if c == nil {
			return
		}

		c.ModerationStatus(moderationStatus)
	})
}

func Fuzz_CommentThreadsListCall_Order(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var order string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &order)
		if c == nil {
			return
		}

		c.Order(order)
	})
}

func Fuzz_CommentThreadsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_CommentThreadsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.CommentThreadListResponse) error

func Fuzz_CommentThreadsListCall_SearchTerms(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var searchTerms string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &searchTerms)
		if c == nil {
			return
		}

		c.SearchTerms(searchTerms)
	})
}

func Fuzz_CommentThreadsListCall_TextFormat(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var textFormat string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &textFormat)
		if c == nil {
			return
		}

		c.TextFormat(textFormat)
	})
}

func Fuzz_CommentThreadsListCall_VideoId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentThreadsListCall
		var videoId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoId)
		if c == nil {
			return
		}

		c.VideoId(videoId)
	})
}

func Fuzz_CommentThreadsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var commentthread *youtube.CommentThread
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &commentthread)
		if s == nil || commentthread == nil {
			return
		}

		r := youtube.NewCommentThreadsService(s)
		r.Insert(part, commentthread)
	})
}

func Fuzz_CommentThreadsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewCommentThreadsService(s)
		r.List(part)
	})
}

func Fuzz_CommentsDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CommentsDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CommentsDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CommentsDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CommentsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CommentsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CommentsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CommentsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CommentsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CommentsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CommentsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CommentsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CommentsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_CommentsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_CommentsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_CommentsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_CommentsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.CommentListResponse) error

func Fuzz_CommentsListCall_ParentId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsListCall
		var parentId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &parentId)
		if c == nil {
			return
		}

		c.ParentId(parentId)
	})
}

func Fuzz_CommentsListCall_TextFormat(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsListCall
		var textFormat string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &textFormat)
		if c == nil {
			return
		}

		c.TextFormat(textFormat)
	})
}

func Fuzz_CommentsMarkAsSpamCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsMarkAsSpamCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CommentsMarkAsSpamCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CommentsMarkAsSpamCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsMarkAsSpamCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CommentsMarkAsSpamCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsMarkAsSpamCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CommentsService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewCommentsService(s)
		r.Delete(id)
	})
}

func Fuzz_CommentsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var comment *youtube.Comment
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &comment)
		if s == nil || comment == nil {
			return
		}

		r := youtube.NewCommentsService(s)
		r.Insert(part, comment)
	})
}

func Fuzz_CommentsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewCommentsService(s)
		r.List(part)
	})
}

func Fuzz_CommentsService_MarkAsSpam(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewCommentsService(s)
		r.MarkAsSpam(id)
	})
}

func Fuzz_CommentsService_SetModerationStatus(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id []string
		var moderationStatus string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id, &moderationStatus)
		if s == nil {
			return
		}

		r := youtube.NewCommentsService(s)
		r.SetModerationStatus(id, moderationStatus)
	})
}

func Fuzz_CommentsService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var comment *youtube.Comment
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &comment)
		if s == nil || comment == nil {
			return
		}

		r := youtube.NewCommentsService(s)
		r.Update(part, comment)
	})
}

func Fuzz_CommentsSetModerationStatusCall_BanAuthor(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsSetModerationStatusCall
		var banAuthor bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &banAuthor)
		if c == nil {
			return
		}

		c.BanAuthor(banAuthor)
	})
}

func Fuzz_CommentsSetModerationStatusCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsSetModerationStatusCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CommentsSetModerationStatusCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CommentsSetModerationStatusCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsSetModerationStatusCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CommentsSetModerationStatusCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsSetModerationStatusCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_CommentsUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_CommentsUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_CommentsUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_CommentsUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.CommentsUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_GeoPoint_UnmarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.GeoPoint
		var d2 []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &d2)
		if s == nil {
			return
		}

		s.UnmarshalJSON(d2)
	})
}

func Fuzz_I18nLanguagesListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nLanguagesListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_I18nLanguagesListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_I18nLanguagesListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nLanguagesListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_I18nLanguagesListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nLanguagesListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_I18nLanguagesListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nLanguagesListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_I18nLanguagesListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nLanguagesListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_I18nLanguagesService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewI18nLanguagesService(s)
		r.List(part)
	})
}

func Fuzz_I18nRegionsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nRegionsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_I18nRegionsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_I18nRegionsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nRegionsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_I18nRegionsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nRegionsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_I18nRegionsListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nRegionsListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_I18nRegionsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.I18nRegionsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_I18nRegionsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewI18nRegionsService(s)
		r.List(part)
	})
}

func Fuzz_LiveBroadcastsBindCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsBindCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveBroadcastsBindCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveBroadcastsBindCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsBindCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveBroadcastsBindCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsBindCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveBroadcastsBindCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsBindCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveBroadcastsBindCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsBindCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveBroadcastsBindCall_StreamId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsBindCall
		var streamId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &streamId)
		if c == nil {
			return
		}

		c.StreamId(streamId)
	})
}

func Fuzz_LiveBroadcastsDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveBroadcastsDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveBroadcastsDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveBroadcastsDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveBroadcastsDeleteCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsDeleteCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveBroadcastsDeleteCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsDeleteCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveBroadcastsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveBroadcastsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveBroadcastsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveBroadcastsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveBroadcastsInsertCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveBroadcastsInsertCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveBroadcastsInsertCuepointCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCuepointCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveBroadcastsInsertCuepointCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveBroadcastsInsertCuepointCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCuepointCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveBroadcastsInsertCuepointCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCuepointCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveBroadcastsInsertCuepointCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCuepointCall
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id)
	})
}

func Fuzz_LiveBroadcastsInsertCuepointCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCuepointCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveBroadcastsInsertCuepointCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCuepointCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveBroadcastsInsertCuepointCall_Part(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsInsertCuepointCall
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &part)
		if c == nil {
			return
		}

		c.Part(part...)
	})
}

func Fuzz_LiveBroadcastsListCall_BroadcastStatus(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var broadcastStatus string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &broadcastStatus)
		if c == nil {
			return
		}

		c.BroadcastStatus(broadcastStatus)
	})
}

func Fuzz_LiveBroadcastsListCall_BroadcastType(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var broadcastType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &broadcastType)
		if c == nil {
			return
		}

		c.BroadcastType(broadcastType)
	})
}

func Fuzz_LiveBroadcastsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveBroadcastsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveBroadcastsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveBroadcastsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveBroadcastsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_LiveBroadcastsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_LiveBroadcastsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_LiveBroadcastsListCall_Mine(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var mine bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mine)
		if c == nil {
			return
		}

		c.Mine(mine)
	})
}

func Fuzz_LiveBroadcastsListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveBroadcastsListCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveBroadcastsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_LiveBroadcastsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.LiveBroadcastListResponse) error

func Fuzz_LiveBroadcastsService_Bind(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id, &part)
		if s == nil {
			return
		}

		r := youtube.NewLiveBroadcastsService(s)
		r.Bind(id, part)
	})
}

func Fuzz_LiveBroadcastsService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewLiveBroadcastsService(s)
		r.Delete(id)
	})
}

func Fuzz_LiveBroadcastsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var livebroadcast *youtube.LiveBroadcast
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &livebroadcast)
		if s == nil || livebroadcast == nil {
			return
		}

		r := youtube.NewLiveBroadcastsService(s)
		r.Insert(part, livebroadcast)
	})
}

func Fuzz_LiveBroadcastsService_InsertCuepoint(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var cuepoint *youtube.Cuepoint
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &cuepoint)
		if s == nil || cuepoint == nil {
			return
		}

		r := youtube.NewLiveBroadcastsService(s)
		r.InsertCuepoint(cuepoint)
	})
}

func Fuzz_LiveBroadcastsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewLiveBroadcastsService(s)
		r.List(part)
	})
}

func Fuzz_LiveBroadcastsService_Transition(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var broadcastStatus string
		var id string
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &broadcastStatus, &id, &part)
		if s == nil {
			return
		}

		r := youtube.NewLiveBroadcastsService(s)
		r.Transition(broadcastStatus, id, part)
	})
}

func Fuzz_LiveBroadcastsService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var livebroadcast *youtube.LiveBroadcast
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &livebroadcast)
		if s == nil || livebroadcast == nil {
			return
		}

		r := youtube.NewLiveBroadcastsService(s)
		r.Update(part, livebroadcast)
	})
}

func Fuzz_LiveBroadcastsTransitionCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsTransitionCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveBroadcastsTransitionCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveBroadcastsTransitionCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsTransitionCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveBroadcastsTransitionCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsTransitionCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveBroadcastsTransitionCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsTransitionCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveBroadcastsTransitionCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsTransitionCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveBroadcastsUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveBroadcastsUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveBroadcastsUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveBroadcastsUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveBroadcastsUpdateCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsUpdateCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveBroadcastsUpdateCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveBroadcastsUpdateCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveChatBansDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatBansDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveChatBansDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveChatBansDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatBansDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveChatBansDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatBansDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveChatBansInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatBansInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveChatBansInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveChatBansInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatBansInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveChatBansInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatBansInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveChatBansService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewLiveChatBansService(s)
		r.Delete(id)
	})
}

func Fuzz_LiveChatBansService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var livechatban *youtube.LiveChatBan
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &livechatban)
		if s == nil || livechatban == nil {
			return
		}

		r := youtube.NewLiveChatBansService(s)
		r.Insert(part, livechatban)
	})
}

func Fuzz_LiveChatMessagesDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveChatMessagesDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveChatMessagesDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveChatMessagesDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveChatMessagesInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveChatMessagesInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveChatMessagesInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveChatMessagesInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveChatMessagesListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveChatMessagesListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveChatMessagesListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveChatMessagesListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveChatMessagesListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_LiveChatMessagesListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_LiveChatMessagesListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_LiveChatMessagesListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_LiveChatMessagesListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.LiveChatMessageListResponse) error

func Fuzz_LiveChatMessagesListCall_ProfileImageSize(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesListCall
		var profileImageSize int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &profileImageSize)
		if c == nil {
			return
		}

		c.ProfileImageSize(profileImageSize)
	})
}

func Fuzz_LiveChatMessagesService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewLiveChatMessagesService(s)
		r.Delete(id)
	})
}

func Fuzz_LiveChatMessagesService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var livechatmessage *youtube.LiveChatMessage
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &livechatmessage)
		if s == nil || livechatmessage == nil {
			return
		}

		r := youtube.NewLiveChatMessagesService(s)
		r.Insert(part, livechatmessage)
	})
}

func Fuzz_LiveChatMessagesService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var liveChatId string
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &liveChatId, &part)
		if s == nil {
			return
		}

		r := youtube.NewLiveChatMessagesService(s)
		r.List(liveChatId, part)
	})
}

func Fuzz_LiveChatMessagesService_Transition(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		r := youtube.NewLiveChatMessagesService(s)
		r.Transition()
	})
}

func Fuzz_LiveChatMessagesTransitionCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesTransitionCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveChatMessagesTransitionCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveChatMessagesTransitionCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesTransitionCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveChatMessagesTransitionCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesTransitionCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveChatMessagesTransitionCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesTransitionCall
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id)
	})
}

func Fuzz_LiveChatMessagesTransitionCall_Status(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatMessagesTransitionCall
		var status string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &status)
		if c == nil {
			return
		}

		c.Status(status)
	})
}

func Fuzz_LiveChatModeratorsDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveChatModeratorsDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveChatModeratorsDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveChatModeratorsDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveChatModeratorsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveChatModeratorsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveChatModeratorsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveChatModeratorsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveChatModeratorsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveChatModeratorsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveChatModeratorsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveChatModeratorsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveChatModeratorsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_LiveChatModeratorsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_LiveChatModeratorsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveChatModeratorsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_LiveChatModeratorsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.LiveChatModeratorListResponse) error

func Fuzz_LiveChatModeratorsService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewLiveChatModeratorsService(s)
		r.Delete(id)
	})
}

func Fuzz_LiveChatModeratorsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var livechatmoderator *youtube.LiveChatModerator
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &livechatmoderator)
		if s == nil || livechatmoderator == nil {
			return
		}

		r := youtube.NewLiveChatModeratorsService(s)
		r.Insert(part, livechatmoderator)
	})
}

func Fuzz_LiveChatModeratorsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var liveChatId string
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &liveChatId, &part)
		if s == nil {
			return
		}

		r := youtube.NewLiveChatModeratorsService(s)
		r.List(liveChatId, part)
	})
}

func Fuzz_LiveStreamsDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveStreamsDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveStreamsDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveStreamsDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveStreamsDeleteCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsDeleteCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveStreamsDeleteCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsDeleteCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveStreamsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveStreamsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveStreamsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveStreamsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveStreamsInsertCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsInsertCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveStreamsInsertCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsInsertCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveStreamsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveStreamsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveStreamsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveStreamsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveStreamsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_LiveStreamsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_LiveStreamsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_LiveStreamsListCall_Mine(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		var mine bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mine)
		if c == nil {
			return
		}

		c.Mine(mine)
	})
}

func Fuzz_LiveStreamsListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveStreamsListCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_LiveStreamsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_LiveStreamsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.LiveStreamListResponse) error

func Fuzz_LiveStreamsService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewLiveStreamsService(s)
		r.Delete(id)
	})
}

func Fuzz_LiveStreamsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var livestream *youtube.LiveStream
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &livestream)
		if s == nil || livestream == nil {
			return
		}

		r := youtube.NewLiveStreamsService(s)
		r.Insert(part, livestream)
	})
}

func Fuzz_LiveStreamsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewLiveStreamsService(s)
		r.List(part)
	})
}

func Fuzz_LiveStreamsService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var livestream *youtube.LiveStream
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &livestream)
		if s == nil || livestream == nil {
			return
		}

		r := youtube.NewLiveStreamsService(s)
		r.Update(part, livestream)
	})
}

func Fuzz_LiveStreamsUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_LiveStreamsUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_LiveStreamsUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_LiveStreamsUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_LiveStreamsUpdateCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsUpdateCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_LiveStreamsUpdateCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.LiveStreamsUpdateCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_MembersListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembersListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_MembersListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_MembersListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembersListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_MembersListCall_FilterByMemberChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembersListCall
		var filterByMemberChannelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &filterByMemberChannelId)
		if c == nil {
			return
		}

		c.FilterByMemberChannelId(filterByMemberChannelId)
	})
}

func Fuzz_MembersListCall_HasAccessToLevel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembersListCall
		var hasAccessToLevel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hasAccessToLevel)
		if c == nil {
			return
		}

		c.HasAccessToLevel(hasAccessToLevel)
	})
}

func Fuzz_MembersListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembersListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_MembersListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembersListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_MembersListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembersListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_MembersListCall_Mode(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembersListCall
		var mode string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mode)
		if c == nil {
			return
		}

		c.Mode(mode)
	})
}

func Fuzz_MembersListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembersListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_MembersListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.MemberListResponse) error

func Fuzz_MembersService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewMembersService(s)
		r.List(part)
	})
}

func Fuzz_MembershipsLevelsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembershipsLevelsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_MembershipsLevelsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_MembershipsLevelsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembershipsLevelsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_MembershipsLevelsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembershipsLevelsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_MembershipsLevelsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.MembershipsLevelsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_MembershipsLevelsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewMembershipsLevelsService(s)
		r.List(part)
	})
}

func Fuzz_PlaylistImagesDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistImagesDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistImagesDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistImagesDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistImagesDeleteCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesDeleteCall
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id)
	})
}

func Fuzz_PlaylistImagesDeleteCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesDeleteCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistImagesInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistImagesInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistImagesInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistImagesInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

// skipping Fuzz_PlaylistImagesInsertCall_Media because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.MediaOption

func Fuzz_PlaylistImagesInsertCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesInsertCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistImagesInsertCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesInsertCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_PlaylistImagesInsertCall_Part(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesInsertCall
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &part)
		if c == nil {
			return
		}

		c.Part(part...)
	})
}

// skipping Fuzz_PlaylistImagesInsertCall_ProgressUpdater because parameters include func, chan, or unsupported interface: google.golang.org/api/googleapi.ProgressUpdater

func Fuzz_PlaylistImagesInsertCall_ResumableMedia(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesInsertCall
		var ctx context.Context
		var r io.ReaderAt
		var size int64
		var mediaType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx, &r, &size, &mediaType)
		if c == nil {
			return
		}

		c.ResumableMedia(ctx, r, size, mediaType)
	})
}

func Fuzz_PlaylistImagesListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistImagesListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistImagesListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistImagesListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistImagesListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_PlaylistImagesListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_PlaylistImagesListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistImagesListCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_PlaylistImagesListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_PlaylistImagesListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.PlaylistImageListResponse) error

func Fuzz_PlaylistImagesListCall_Parent(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		var parent string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &parent)
		if c == nil {
			return
		}

		c.Parent(parent)
	})
}

func Fuzz_PlaylistImagesListCall_Part(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesListCall
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &part)
		if c == nil {
			return
		}

		c.Part(part...)
	})
}

func Fuzz_PlaylistImagesService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		r := youtube.NewPlaylistImagesService(s)
		r.Delete()
	})
}

func Fuzz_PlaylistImagesService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var playlistimage *youtube.PlaylistImage
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &playlistimage)
		if s == nil || playlistimage == nil {
			return
		}

		r := youtube.NewPlaylistImagesService(s)
		r.Insert(playlistimage)
	})
}

func Fuzz_PlaylistImagesService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		r := youtube.NewPlaylistImagesService(s)
		r.List()
	})
}

func Fuzz_PlaylistImagesService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var playlistimage *youtube.PlaylistImage
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &playlistimage)
		if s == nil || playlistimage == nil {
			return
		}

		r := youtube.NewPlaylistImagesService(s)
		r.Update(playlistimage)
	})
}

func Fuzz_PlaylistImagesUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistImagesUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistImagesUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistImagesUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

// skipping Fuzz_PlaylistImagesUpdateCall_Media because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.MediaOption

func Fuzz_PlaylistImagesUpdateCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesUpdateCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistImagesUpdateCall_Part(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesUpdateCall
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &part)
		if c == nil {
			return
		}

		c.Part(part...)
	})
}

// skipping Fuzz_PlaylistImagesUpdateCall_ProgressUpdater because parameters include func, chan, or unsupported interface: google.golang.org/api/googleapi.ProgressUpdater

func Fuzz_PlaylistImagesUpdateCall_ResumableMedia(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistImagesUpdateCall
		var ctx context.Context
		var r io.ReaderAt
		var size int64
		var mediaType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx, &r, &size, &mediaType)
		if c == nil {
			return
		}

		c.ResumableMedia(ctx, r, size, mediaType)
	})
}

func Fuzz_PlaylistItemsDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistItemsDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistItemsDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistItemsDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistItemsDeleteCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsDeleteCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistItemsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistItemsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistItemsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistItemsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistItemsInsertCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsInsertCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistItemsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistItemsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistItemsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistItemsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistItemsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_PlaylistItemsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_PlaylistItemsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_PlaylistItemsListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistItemsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_PlaylistItemsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.PlaylistItemListResponse) error

func Fuzz_PlaylistItemsListCall_PlaylistId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		var playlistId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &playlistId)
		if c == nil {
			return
		}

		c.PlaylistId(playlistId)
	})
}

func Fuzz_PlaylistItemsListCall_VideoId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsListCall
		var videoId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoId)
		if c == nil {
			return
		}

		c.VideoId(videoId)
	})
}

func Fuzz_PlaylistItemsService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewPlaylistItemsService(s)
		r.Delete(id)
	})
}

func Fuzz_PlaylistItemsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var playlistitem *youtube.PlaylistItem
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &playlistitem)
		if s == nil || playlistitem == nil {
			return
		}

		r := youtube.NewPlaylistItemsService(s)
		r.Insert(part, playlistitem)
	})
}

func Fuzz_PlaylistItemsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewPlaylistItemsService(s)
		r.List(part)
	})
}

func Fuzz_PlaylistItemsService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var playlistitem *youtube.PlaylistItem
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &playlistitem)
		if s == nil || playlistitem == nil {
			return
		}

		r := youtube.NewPlaylistItemsService(s)
		r.Update(part, playlistitem)
	})
}

func Fuzz_PlaylistItemsUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistItemsUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistItemsUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistItemsUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistItemsUpdateCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistItemsUpdateCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistsDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistsDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistsDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistsDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistsDeleteCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsDeleteCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistsInsertCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsInsertCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistsInsertCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsInsertCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_PlaylistsListCall_ChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var channelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &channelId)
		if c == nil {
			return
		}

		c.ChannelId(channelId)
	})
}

func Fuzz_PlaylistsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistsListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_PlaylistsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_PlaylistsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_PlaylistsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_PlaylistsListCall_Mine(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var mine bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mine)
		if c == nil {
			return
		}

		c.Mine(mine)
	})
}

func Fuzz_PlaylistsListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_PlaylistsListCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_PlaylistsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_PlaylistsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.PlaylistListResponse) error

func Fuzz_PlaylistsService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewPlaylistsService(s)
		r.Delete(id)
	})
}

func Fuzz_PlaylistsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var playlist *youtube.Playlist
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &playlist)
		if s == nil || playlist == nil {
			return
		}

		r := youtube.NewPlaylistsService(s)
		r.Insert(part, playlist)
	})
}

func Fuzz_PlaylistsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewPlaylistsService(s)
		r.List(part)
	})
}

func Fuzz_PlaylistsService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var playlist *youtube.Playlist
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &playlist)
		if s == nil || playlist == nil {
			return
		}

		r := youtube.NewPlaylistsService(s)
		r.Update(part, playlist)
	})
}

func Fuzz_PlaylistsUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_PlaylistsUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_PlaylistsUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_PlaylistsUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_PlaylistsUpdateCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.PlaylistsUpdateCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_SearchListCall_ChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var channelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &channelId)
		if c == nil {
			return
		}

		c.ChannelId(channelId)
	})
}

func Fuzz_SearchListCall_ChannelType(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var channelType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &channelType)
		if c == nil {
			return
		}

		c.ChannelType(channelType)
	})
}

func Fuzz_SearchListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_SearchListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_SearchListCall_EventType(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var eventType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &eventType)
		if c == nil {
			return
		}

		c.EventType(eventType)
	})
}

func Fuzz_SearchListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_SearchListCall_ForContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var forContentOwner bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &forContentOwner)
		if c == nil {
			return
		}

		c.ForContentOwner(forContentOwner)
	})
}

func Fuzz_SearchListCall_ForDeveloper(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var forDeveloper bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &forDeveloper)
		if c == nil {
			return
		}

		c.ForDeveloper(forDeveloper)
	})
}

func Fuzz_SearchListCall_ForMine(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var forMine bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &forMine)
		if c == nil {
			return
		}

		c.ForMine(forMine)
	})
}

func Fuzz_SearchListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_SearchListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_SearchListCall_Location(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var location string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &location)
		if c == nil {
			return
		}

		c.Location(location)
	})
}

func Fuzz_SearchListCall_LocationRadius(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var locationRadius string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &locationRadius)
		if c == nil {
			return
		}

		c.LocationRadius(locationRadius)
	})
}

func Fuzz_SearchListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_SearchListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_SearchListCall_Order(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var order string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &order)
		if c == nil {
			return
		}

		c.Order(order)
	})
}

func Fuzz_SearchListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_SearchListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.SearchListResponse) error

func Fuzz_SearchListCall_PublishedAfter(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var publishedAfter string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &publishedAfter)
		if c == nil {
			return
		}

		c.PublishedAfter(publishedAfter)
	})
}

func Fuzz_SearchListCall_PublishedBefore(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var publishedBefore string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &publishedBefore)
		if c == nil {
			return
		}

		c.PublishedBefore(publishedBefore)
	})
}

func Fuzz_SearchListCall_Q(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var q string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &q)
		if c == nil {
			return
		}

		c.Q(q)
	})
}

func Fuzz_SearchListCall_RegionCode(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var regionCode string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &regionCode)
		if c == nil {
			return
		}

		c.RegionCode(regionCode)
	})
}

func Fuzz_SearchListCall_RelevanceLanguage(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var relevanceLanguage string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &relevanceLanguage)
		if c == nil {
			return
		}

		c.RelevanceLanguage(relevanceLanguage)
	})
}

func Fuzz_SearchListCall_SafeSearch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var safeSearch string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &safeSearch)
		if c == nil {
			return
		}

		c.SafeSearch(safeSearch)
	})
}

func Fuzz_SearchListCall_TopicId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var topicId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &topicId)
		if c == nil {
			return
		}

		c.TopicId(topicId)
	})
}

func Fuzz_SearchListCall_Type(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var type_ []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &type_)
		if c == nil {
			return
		}

		c.Type(type_...)
	})
}

func Fuzz_SearchListCall_VideoCaption(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoCaption string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoCaption)
		if c == nil {
			return
		}

		c.VideoCaption(videoCaption)
	})
}

func Fuzz_SearchListCall_VideoCategoryId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoCategoryId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoCategoryId)
		if c == nil {
			return
		}

		c.VideoCategoryId(videoCategoryId)
	})
}

func Fuzz_SearchListCall_VideoDefinition(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoDefinition string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoDefinition)
		if c == nil {
			return
		}

		c.VideoDefinition(videoDefinition)
	})
}

func Fuzz_SearchListCall_VideoDimension(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoDimension string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoDimension)
		if c == nil {
			return
		}

		c.VideoDimension(videoDimension)
	})
}

func Fuzz_SearchListCall_VideoDuration(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoDuration string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoDuration)
		if c == nil {
			return
		}

		c.VideoDuration(videoDuration)
	})
}

func Fuzz_SearchListCall_VideoEmbeddable(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoEmbeddable string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoEmbeddable)
		if c == nil {
			return
		}

		c.VideoEmbeddable(videoEmbeddable)
	})
}

func Fuzz_SearchListCall_VideoLicense(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoLicense string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoLicense)
		if c == nil {
			return
		}

		c.VideoLicense(videoLicense)
	})
}

func Fuzz_SearchListCall_VideoPaidProductPlacement(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoPaidProductPlacement string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoPaidProductPlacement)
		if c == nil {
			return
		}

		c.VideoPaidProductPlacement(videoPaidProductPlacement)
	})
}

func Fuzz_SearchListCall_VideoSyndicated(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoSyndicated string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoSyndicated)
		if c == nil {
			return
		}

		c.VideoSyndicated(videoSyndicated)
	})
}

func Fuzz_SearchListCall_VideoType(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SearchListCall
		var videoType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoType)
		if c == nil {
			return
		}

		c.VideoType(videoType)
	})
}

func Fuzz_SearchService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewSearchService(s)
		r.List(part)
	})
}

func Fuzz_SubscriptionsDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_SubscriptionsDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_SubscriptionsDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_SubscriptionsDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_SubscriptionsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_SubscriptionsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_SubscriptionsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_SubscriptionsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_SubscriptionsListCall_ChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var channelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &channelId)
		if c == nil {
			return
		}

		c.ChannelId(channelId)
	})
}

func Fuzz_SubscriptionsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_SubscriptionsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_SubscriptionsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_SubscriptionsListCall_ForChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var forChannelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &forChannelId)
		if c == nil {
			return
		}

		c.ForChannelId(forChannelId)
	})
}

func Fuzz_SubscriptionsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_SubscriptionsListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_SubscriptionsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_SubscriptionsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_SubscriptionsListCall_Mine(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var mine bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mine)
		if c == nil {
			return
		}

		c.Mine(mine)
	})
}

func Fuzz_SubscriptionsListCall_MyRecentSubscribers(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var myRecentSubscribers bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &myRecentSubscribers)
		if c == nil {
			return
		}

		c.MyRecentSubscribers(myRecentSubscribers)
	})
}

func Fuzz_SubscriptionsListCall_MySubscribers(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var mySubscribers bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &mySubscribers)
		if c == nil {
			return
		}

		c.MySubscribers(mySubscribers)
	})
}

func Fuzz_SubscriptionsListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_SubscriptionsListCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

func Fuzz_SubscriptionsListCall_Order(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var order string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &order)
		if c == nil {
			return
		}

		c.Order(order)
	})
}

func Fuzz_SubscriptionsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SubscriptionsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_SubscriptionsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.SubscriptionListResponse) error

func Fuzz_SubscriptionsService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewSubscriptionsService(s)
		r.Delete(id)
	})
}

func Fuzz_SubscriptionsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var subscription *youtube.Subscription
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &subscription)
		if s == nil || subscription == nil {
			return
		}

		r := youtube.NewSubscriptionsService(s)
		r.Insert(part, subscription)
	})
}

func Fuzz_SubscriptionsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewSubscriptionsService(s)
		r.List(part)
	})
}

func Fuzz_SuperChatEventsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SuperChatEventsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_SuperChatEventsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_SuperChatEventsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SuperChatEventsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_SuperChatEventsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SuperChatEventsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_SuperChatEventsListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SuperChatEventsListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_SuperChatEventsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SuperChatEventsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_SuperChatEventsListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SuperChatEventsListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_SuperChatEventsListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.SuperChatEventsListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_SuperChatEventsListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.SuperChatEventListResponse) error

func Fuzz_SuperChatEventsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewSuperChatEventsService(s)
		r.List(part)
	})
}

func Fuzz_TestsInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.TestsInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_TestsInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_TestsInsertCall_ExternalChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.TestsInsertCall
		var externalChannelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &externalChannelId)
		if c == nil {
			return
		}

		c.ExternalChannelId(externalChannelId)
	})
}

func Fuzz_TestsInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.TestsInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_TestsInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.TestsInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_TestsService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var testitem *youtube.TestItem
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &testitem)
		if s == nil || testitem == nil {
			return
		}

		r := youtube.NewTestsService(s)
		r.Insert(part, testitem)
	})
}

func Fuzz_ThirdPartyLinksDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ThirdPartyLinksDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ThirdPartyLinksDeleteCall_ExternalChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksDeleteCall
		var externalChannelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &externalChannelId)
		if c == nil {
			return
		}

		c.ExternalChannelId(externalChannelId)
	})
}

func Fuzz_ThirdPartyLinksDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ThirdPartyLinksDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ThirdPartyLinksDeleteCall_Part(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksDeleteCall
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &part)
		if c == nil {
			return
		}

		c.Part(part...)
	})
}

func Fuzz_ThirdPartyLinksInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ThirdPartyLinksInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ThirdPartyLinksInsertCall_ExternalChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksInsertCall
		var externalChannelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &externalChannelId)
		if c == nil {
			return
		}

		c.ExternalChannelId(externalChannelId)
	})
}

func Fuzz_ThirdPartyLinksInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ThirdPartyLinksInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ThirdPartyLinksListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ThirdPartyLinksListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ThirdPartyLinksListCall_ExternalChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksListCall
		var externalChannelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &externalChannelId)
		if c == nil {
			return
		}

		c.ExternalChannelId(externalChannelId)
	})
}

func Fuzz_ThirdPartyLinksListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ThirdPartyLinksListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ThirdPartyLinksListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_ThirdPartyLinksListCall_LinkingToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksListCall
		var linkingToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &linkingToken)
		if c == nil {
			return
		}

		c.LinkingToken(linkingToken)
	})
}

func Fuzz_ThirdPartyLinksListCall_Type(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksListCall
		var type_ string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &type_)
		if c == nil {
			return
		}

		c.Type(type_)
	})
}

func Fuzz_ThirdPartyLinksService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var linkingToken string
		var type_ string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &linkingToken, &type_)
		if s == nil {
			return
		}

		r := youtube.NewThirdPartyLinksService(s)
		r.Delete(linkingToken, type_)
	})
}

func Fuzz_ThirdPartyLinksService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var thirdpartylink *youtube.ThirdPartyLink
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &thirdpartylink)
		if s == nil || thirdpartylink == nil {
			return
		}

		r := youtube.NewThirdPartyLinksService(s)
		r.Insert(part, thirdpartylink)
	})
}

func Fuzz_ThirdPartyLinksService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewThirdPartyLinksService(s)
		r.List(part)
	})
}

func Fuzz_ThirdPartyLinksService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var thirdpartylink *youtube.ThirdPartyLink
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &thirdpartylink)
		if s == nil || thirdpartylink == nil {
			return
		}

		r := youtube.NewThirdPartyLinksService(s)
		r.Update(part, thirdpartylink)
	})
}

func Fuzz_ThirdPartyLinksUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ThirdPartyLinksUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ThirdPartyLinksUpdateCall_ExternalChannelId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksUpdateCall
		var externalChannelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &externalChannelId)
		if c == nil {
			return
		}

		c.ExternalChannelId(externalChannelId)
	})
}

func Fuzz_ThirdPartyLinksUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ThirdPartyLinksUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThirdPartyLinksUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_ThumbnailsService_Set(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var videoId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &videoId)
		if s == nil {
			return
		}

		r := youtube.NewThumbnailsService(s)
		r.Set(videoId)
	})
}

func Fuzz_ThumbnailsSetCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThumbnailsSetCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_ThumbnailsSetCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_ThumbnailsSetCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThumbnailsSetCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_ThumbnailsSetCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThumbnailsSetCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

// skipping Fuzz_ThumbnailsSetCall_Media because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.MediaOption

func Fuzz_ThumbnailsSetCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThumbnailsSetCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

// skipping Fuzz_ThumbnailsSetCall_ProgressUpdater because parameters include func, chan, or unsupported interface: google.golang.org/api/googleapi.ProgressUpdater

func Fuzz_ThumbnailsSetCall_ResumableMedia(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.ThumbnailsSetCall
		var ctx context.Context
		var r io.ReaderAt
		var size int64
		var mediaType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx, &r, &size, &mediaType)
		if c == nil {
			return
		}

		c.ResumableMedia(ctx, r, size, mediaType)
	})
}

func Fuzz_VideoAbuseReportReasonsListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoAbuseReportReasonsListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_VideoAbuseReportReasonsListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_VideoAbuseReportReasonsListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoAbuseReportReasonsListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_VideoAbuseReportReasonsListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoAbuseReportReasonsListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_VideoAbuseReportReasonsListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoAbuseReportReasonsListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_VideoAbuseReportReasonsListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoAbuseReportReasonsListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_VideoAbuseReportReasonsService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewVideoAbuseReportReasonsService(s)
		r.List(part)
	})
}

func Fuzz_VideoCategoriesListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoCategoriesListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_VideoCategoriesListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_VideoCategoriesListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoCategoriesListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_VideoCategoriesListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoCategoriesListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_VideoCategoriesListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoCategoriesListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_VideoCategoriesListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoCategoriesListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_VideoCategoriesListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoCategoriesListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_VideoCategoriesListCall_RegionCode(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideoCategoriesListCall
		var regionCode string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &regionCode)
		if c == nil {
			return
		}

		c.RegionCode(regionCode)
	})
}

func Fuzz_VideoCategoriesService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewVideoCategoriesService(s)
		r.List(part)
	})
}

func Fuzz_VideoFileDetailsVideoStream_UnmarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.VideoFileDetailsVideoStream
		var d2 []byte
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &d2)
		if s == nil {
			return
		}

		s.UnmarshalJSON(d2)
	})
}

func Fuzz_VideosDeleteCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosDeleteCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_VideosDeleteCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_VideosDeleteCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosDeleteCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_VideosDeleteCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosDeleteCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_VideosDeleteCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosDeleteCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_VideosGetRatingCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosGetRatingCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_VideosGetRatingCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_VideosGetRatingCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosGetRatingCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_VideosGetRatingCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosGetRatingCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_VideosGetRatingCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosGetRatingCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_VideosGetRatingCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosGetRatingCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_VideosInsertCall_AutoLevels(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosInsertCall
		var autoLevels bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &autoLevels)
		if c == nil {
			return
		}

		c.AutoLevels(autoLevels)
	})
}

func Fuzz_VideosInsertCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosInsertCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_VideosInsertCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_VideosInsertCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosInsertCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_VideosInsertCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosInsertCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

// skipping Fuzz_VideosInsertCall_Media because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.MediaOption

func Fuzz_VideosInsertCall_NotifySubscribers(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosInsertCall
		var notifySubscribers bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &notifySubscribers)
		if c == nil {
			return
		}

		c.NotifySubscribers(notifySubscribers)
	})
}

func Fuzz_VideosInsertCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosInsertCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_VideosInsertCall_OnBehalfOfContentOwnerChannel(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosInsertCall
		var onBehalfOfContentOwnerChannel string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwnerChannel)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwnerChannel(onBehalfOfContentOwnerChannel)
	})
}

// skipping Fuzz_VideosInsertCall_ProgressUpdater because parameters include func, chan, or unsupported interface: google.golang.org/api/googleapi.ProgressUpdater

func Fuzz_VideosInsertCall_ResumableMedia(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosInsertCall
		var ctx context.Context
		var r io.ReaderAt
		var size int64
		var mediaType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx, &r, &size, &mediaType)
		if c == nil {
			return
		}

		c.ResumableMedia(ctx, r, size, mediaType)
	})
}

func Fuzz_VideosInsertCall_Stabilize(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosInsertCall
		var stabilize bool
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &stabilize)
		if c == nil {
			return
		}

		c.Stabilize(stabilize)
	})
}

func Fuzz_VideosListCall_Chart(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var chart string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &chart)
		if c == nil {
			return
		}

		c.Chart(chart)
	})
}

func Fuzz_VideosListCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_VideosListCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_VideosListCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_VideosListCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_VideosListCall_Hl(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var hl string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &hl)
		if c == nil {
			return
		}

		c.Hl(hl)
	})
}

func Fuzz_VideosListCall_Id(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &id)
		if c == nil {
			return
		}

		c.Id(id...)
	})
}

func Fuzz_VideosListCall_IfNoneMatch(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var entityTag string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &entityTag)
		if c == nil {
			return
		}

		c.IfNoneMatch(entityTag)
	})
}

func Fuzz_VideosListCall_Locale(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var locale string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &locale)
		if c == nil {
			return
		}

		c.Locale(locale)
	})
}

func Fuzz_VideosListCall_MaxHeight(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var maxHeight int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxHeight)
		if c == nil {
			return
		}

		c.MaxHeight(maxHeight)
	})
}

func Fuzz_VideosListCall_MaxResults(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var maxResults int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxResults)
		if c == nil {
			return
		}

		c.MaxResults(maxResults)
	})
}

func Fuzz_VideosListCall_MaxWidth(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var maxWidth int64
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &maxWidth)
		if c == nil {
			return
		}

		c.MaxWidth(maxWidth)
	})
}

func Fuzz_VideosListCall_MyRating(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var myRating string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &myRating)
		if c == nil {
			return
		}

		c.MyRating(myRating)
	})
}

func Fuzz_VideosListCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_VideosListCall_PageToken(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var pageToken string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &pageToken)
		if c == nil {
			return
		}

		c.PageToken(pageToken)
	})
}

// skipping Fuzz_VideosListCall_Pages because parameters include func, chan, or unsupported interface: func(*google.golang.org/api/youtube/v3.VideoListResponse) error

func Fuzz_VideosListCall_RegionCode(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var regionCode string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &regionCode)
		if c == nil {
			return
		}

		c.RegionCode(regionCode)
	})
}

func Fuzz_VideosListCall_VideoCategoryId(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosListCall
		var videoCategoryId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &videoCategoryId)
		if c == nil {
			return
		}

		c.VideoCategoryId(videoCategoryId)
	})
}

func Fuzz_VideosRateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosRateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_VideosRateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_VideosRateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosRateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_VideosRateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosRateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_VideosReportAbuseCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosReportAbuseCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_VideosReportAbuseCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_VideosReportAbuseCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosReportAbuseCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_VideosReportAbuseCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosReportAbuseCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_VideosReportAbuseCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosReportAbuseCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_VideosService_Delete(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewVideosService(s)
		r.Delete(id)
	})
}

func Fuzz_VideosService_GetRating(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id)
		if s == nil {
			return
		}

		r := youtube.NewVideosService(s)
		r.GetRating(id)
	})
}

func Fuzz_VideosService_Insert(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var video *youtube.Video
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &video)
		if s == nil || video == nil {
			return
		}

		r := youtube.NewVideosService(s)
		r.Insert(part, video)
	})
}

func Fuzz_VideosService_List(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part)
		if s == nil {
			return
		}

		r := youtube.NewVideosService(s)
		r.List(part)
	})
}

func Fuzz_VideosService_Rate(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var id string
		var rating string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &id, &rating)
		if s == nil {
			return
		}

		r := youtube.NewVideosService(s)
		r.Rate(id, rating)
	})
}

func Fuzz_VideosService_ReportAbuse(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var videoabusereport *youtube.VideoAbuseReport
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &videoabusereport)
		if s == nil || videoabusereport == nil {
			return
		}

		r := youtube.NewVideosService(s)
		r.ReportAbuse(videoabusereport)
	})
}

func Fuzz_VideosService_Update(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var part []string
		var video *youtube.Video
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &part, &video)
		if s == nil || video == nil {
			return
		}

		r := youtube.NewVideosService(s)
		r.Update(part, video)
	})
}

func Fuzz_VideosUpdateCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosUpdateCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_VideosUpdateCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_VideosUpdateCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosUpdateCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_VideosUpdateCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosUpdateCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_VideosUpdateCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.VideosUpdateCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_WatermarksService_Set(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var channelId string
		var invideobranding *youtube.InvideoBranding
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &channelId, &invideobranding)
		if s == nil || invideobranding == nil {
			return
		}

		r := youtube.NewWatermarksService(s)
		r.Set(channelId, invideobranding)
	})
}

func Fuzz_WatermarksService_Unset(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var channelId string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &channelId)
		if s == nil {
			return
		}

		r := youtube.NewWatermarksService(s)
		r.Unset(channelId)
	})
}

func Fuzz_WatermarksSetCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.WatermarksSetCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_WatermarksSetCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_WatermarksSetCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.WatermarksSetCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_WatermarksSetCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.WatermarksSetCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

// skipping Fuzz_WatermarksSetCall_Media because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.MediaOption

func Fuzz_WatermarksSetCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.WatermarksSetCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

// skipping Fuzz_WatermarksSetCall_ProgressUpdater because parameters include func, chan, or unsupported interface: google.golang.org/api/googleapi.ProgressUpdater

func Fuzz_WatermarksSetCall_ResumableMedia(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.WatermarksSetCall
		var ctx context.Context
		var r io.ReaderAt
		var size int64
		var mediaType string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx, &r, &size, &mediaType)
		if c == nil {
			return
		}

		c.ResumableMedia(ctx, r, size, mediaType)
	})
}

func Fuzz_WatermarksUnsetCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.WatermarksUnsetCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_WatermarksUnsetCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_WatermarksUnsetCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.WatermarksUnsetCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_WatermarksUnsetCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.WatermarksUnsetCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_WatermarksUnsetCall_OnBehalfOfContentOwner(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.WatermarksUnsetCall
		var onBehalfOfContentOwner string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &onBehalfOfContentOwner)
		if c == nil {
			return
		}

		c.OnBehalfOfContentOwner(onBehalfOfContentOwner)
	})
}

func Fuzz_YoutubeV3Service_UpdateCommentThreads(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		var commentthread *youtube.CommentThread
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s, &commentthread)
		if s == nil || commentthread == nil {
			return
		}

		r := youtube.NewYoutubeV3Service(s)
		r.UpdateCommentThreads(commentthread)
	})
}

func Fuzz_YoutubeV3UpdateCommentThreadsCall_Context(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.YoutubeV3UpdateCommentThreadsCall
		var ctx context.Context
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &ctx)
		if c == nil {
			return
		}

		c.Context(ctx)
	})
}

// skipping Fuzz_YoutubeV3UpdateCommentThreadsCall_Do because parameters include func, chan, or unsupported interface: []google.golang.org/api/googleapi.CallOption

func Fuzz_YoutubeV3UpdateCommentThreadsCall_Fields(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.YoutubeV3UpdateCommentThreadsCall
		var s []googleapi.Field
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &s)
		if c == nil {
			return
		}

		c.Fields(s...)
	})
}

func Fuzz_YoutubeV3UpdateCommentThreadsCall_Header(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.YoutubeV3UpdateCommentThreadsCall
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c)
		if c == nil {
			return
		}

		c.Header()
	})
}

func Fuzz_YoutubeV3UpdateCommentThreadsCall_Part(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var c *youtube.YoutubeV3UpdateCommentThreadsCall
		var part []string
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&c, &part)
		if c == nil {
			return
		}

		c.Part(part...)
	})
}

func Fuzz_AbuseReport_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.AbuseReport
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_AbuseType_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.AbuseType
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_AccessPolicy_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.AccessPolicy
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Activity_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Activity
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsBulletin_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsBulletin
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsChannelItem_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsChannelItem
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsComment_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsComment
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsFavorite_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsFavorite
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsLike_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsLike
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsPlaylistItem_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsPlaylistItem
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsPromotedItem_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsPromotedItem
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsRecommendation_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsRecommendation
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsSocial_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsSocial
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsSubscription_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsSubscription
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityContentDetailsUpload_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityContentDetailsUpload
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivityListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivityListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ActivitySnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ActivitySnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Caption_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Caption
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CaptionListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CaptionListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CaptionSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CaptionSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CdnSettings_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CdnSettings
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Channel_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Channel
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelAuditDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelAuditDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelBannerResource_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelBannerResource
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelBrandingSettings_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelBrandingSettings
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelContentDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelContentDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelContentDetailsRelatedPlaylists_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelContentDetailsRelatedPlaylists
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelContentOwnerDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelContentOwnerDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelConversionPing_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelConversionPing
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelConversionPings_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelConversionPings
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelLocalization_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelLocalization
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelProfileDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelProfileDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelSection_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelSection
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelSectionContentDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelSectionContentDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelSectionListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelSectionListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelSectionLocalization_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelSectionLocalization
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelSectionSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelSectionSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelSectionTargeting_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelSectionTargeting
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelSettings_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelSettings
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelStatistics_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelStatistics
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelStatus_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelStatus
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelToStoreLinkDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelToStoreLinkDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelToStoreLinkDetailsBillingDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelToStoreLinkDetailsBillingDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ChannelTopicDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ChannelTopicDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Comment_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Comment
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CommentListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CommentListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CommentSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CommentSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CommentSnippetAuthorChannelId_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CommentSnippetAuthorChannelId
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CommentThread_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CommentThread
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CommentThreadListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CommentThreadListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CommentThreadReplies_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CommentThreadReplies
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CommentThreadSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CommentThreadSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ContentRating_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ContentRating
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Cuepoint_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Cuepoint
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_CuepointSchedule_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.CuepointSchedule
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Entity_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Entity
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_GeoPoint_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.GeoPoint
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_I18nLanguage_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.I18nLanguage
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_I18nLanguageListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.I18nLanguageListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_I18nLanguageSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.I18nLanguageSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_I18nRegion_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.I18nRegion
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_I18nRegionListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.I18nRegionListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_I18nRegionSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.I18nRegionSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ImageSettings_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ImageSettings
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_IngestionInfo_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.IngestionInfo
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_InvideoBranding_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.InvideoBranding
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_InvideoPosition_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.InvideoPosition
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_InvideoTiming_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.InvideoTiming
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LanguageTag_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LanguageTag
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LevelDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LevelDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveBroadcast_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveBroadcast
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveBroadcastContentDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveBroadcastContentDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveBroadcastListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveBroadcastListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveBroadcastMonetizationDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveBroadcastMonetizationDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveBroadcastSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveBroadcastSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveBroadcastStatistics_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveBroadcastStatistics
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveBroadcastStatus_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveBroadcastStatus
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatBan_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatBan
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatBanSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatBanSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatFanFundingEventDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatFanFundingEventDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatGiftMembershipReceivedDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatGiftMembershipReceivedDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatMemberMilestoneChatDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatMemberMilestoneChatDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatMembershipGiftingDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatMembershipGiftingDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatMessage_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatMessage
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatMessageAuthorDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatMessageAuthorDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatMessageDeletedDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatMessageDeletedDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatMessageListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatMessageListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatMessageRetractedDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatMessageRetractedDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatMessageSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatMessageSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatModerator_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatModerator
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatModeratorListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatModeratorListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatModeratorSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatModeratorSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatNewSponsorDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatNewSponsorDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatPollDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatPollDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatPollDetailsPollMetadata_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatPollDetailsPollMetadata
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatPollDetailsPollMetadataPollOption_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatPollDetailsPollMetadataPollOption
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatSuperChatDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatSuperChatDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatSuperStickerDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatSuperStickerDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatTextMessageDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatTextMessageDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveChatUserBannedMessageDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveChatUserBannedMessageDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveStream_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveStream
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveStreamConfigurationIssue_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveStreamConfigurationIssue
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveStreamContentDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveStreamContentDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveStreamHealthStatus_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveStreamHealthStatus
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveStreamListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveStreamListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveStreamSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveStreamSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LiveStreamStatus_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LiveStreamStatus
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LocalizedProperty_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LocalizedProperty
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_LocalizedString_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.LocalizedString
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Member_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Member
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_MemberListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.MemberListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_MemberSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.MemberSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_MembershipsDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.MembershipsDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_MembershipsDuration_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.MembershipsDuration
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_MembershipsDurationAtLevel_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.MembershipsDurationAtLevel
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_MembershipsLevel_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.MembershipsLevel
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_MembershipsLevelListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.MembershipsLevelListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_MembershipsLevelSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.MembershipsLevelSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_MonitorStreamInfo_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.MonitorStreamInfo
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PageInfo_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PageInfo
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Playlist_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Playlist
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistContentDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistContentDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistImage_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistImage
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistImageListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistImageListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistImageSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistImageSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistItem_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistItem
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistItemContentDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistItemContentDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistItemListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistItemListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistItemSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistItemSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistItemStatus_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistItemStatus
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistLocalization_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistLocalization
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistPlayer_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistPlayer
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PlaylistStatus_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PlaylistStatus
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_PropertyValue_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.PropertyValue
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_RelatedEntity_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.RelatedEntity
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ResourceId_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ResourceId
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SearchListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SearchListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SearchResult_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SearchResult
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SearchResultSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SearchResultSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Subscription_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Subscription
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SubscriptionContentDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SubscriptionContentDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SubscriptionListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SubscriptionListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SubscriptionSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SubscriptionSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SubscriptionSubscriberSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SubscriptionSubscriberSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SuperChatEvent_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SuperChatEvent
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SuperChatEventListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SuperChatEventListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SuperChatEventSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SuperChatEventSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_SuperStickerMetadata_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.SuperStickerMetadata
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_TestItem_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.TestItem
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ThirdPartyLink_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ThirdPartyLink
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ThirdPartyLinkListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ThirdPartyLinkListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ThirdPartyLinkSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ThirdPartyLinkSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ThirdPartyLinkStatus_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ThirdPartyLinkStatus
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Thumbnail_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Thumbnail
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ThumbnailDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ThumbnailDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_ThumbnailSetResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.ThumbnailSetResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_Video_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.Video
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoAbuseReport_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoAbuseReport
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoAbuseReportReason_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoAbuseReportReason
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoAbuseReportReasonListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoAbuseReportReasonListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoAbuseReportReasonSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoAbuseReportReasonSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoAbuseReportSecondaryReason_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoAbuseReportSecondaryReason
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoAgeGating_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoAgeGating
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoCategory_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoCategory
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoCategoryListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoCategoryListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoCategorySnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoCategorySnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoContentDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoContentDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoContentDetailsRegionRestriction_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoContentDetailsRegionRestriction
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoFileDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoFileDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoFileDetailsAudioStream_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoFileDetailsAudioStream
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoFileDetailsVideoStream_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoFileDetailsVideoStream
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoGetRatingResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoGetRatingResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoListResponse_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoListResponse
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoLiveStreamingDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoLiveStreamingDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoLocalization_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoLocalization
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoMonetizationDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoMonetizationDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoPaidProductPlacementDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoPaidProductPlacementDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoPlayer_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoPlayer
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoProcessingDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoProcessingDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoProcessingDetailsProcessingProgress_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoProcessingDetailsProcessingProgress
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoRating_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoRating
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoRecordingDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoRecordingDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoSnippet_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoSnippet
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoStatistics_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoStatistics
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoStatus_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoStatus
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoSuggestions_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoSuggestions
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoSuggestionsTagSuggestion_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoSuggestionsTagSuggestion
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_VideoTopicDetails_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.VideoTopicDetails
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_WatchSettings_MarshalJSON(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s youtube.WatchSettings
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)

		s.MarshalJSON()
	})
}

func Fuzz_New(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var client *http.Client
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&client)
		if client == nil {
			return
		}

		youtube.New(client)
	})
}

func Fuzz_NewAbuseReportsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewAbuseReportsService(s)
	})
}

func Fuzz_NewActivitiesService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewActivitiesService(s)
	})
}

func Fuzz_NewCaptionsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewCaptionsService(s)
	})
}

func Fuzz_NewChannelBannersService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewChannelBannersService(s)
	})
}

func Fuzz_NewChannelSectionsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewChannelSectionsService(s)
	})
}

func Fuzz_NewChannelsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewChannelsService(s)
	})
}

func Fuzz_NewCommentThreadsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewCommentThreadsService(s)
	})
}

func Fuzz_NewCommentsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewCommentsService(s)
	})
}

func Fuzz_NewI18nLanguagesService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewI18nLanguagesService(s)
	})
}

func Fuzz_NewI18nRegionsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewI18nRegionsService(s)
	})
}

func Fuzz_NewLiveBroadcastsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewLiveBroadcastsService(s)
	})
}

func Fuzz_NewLiveChatBansService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewLiveChatBansService(s)
	})
}

func Fuzz_NewLiveChatMessagesService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewLiveChatMessagesService(s)
	})
}

func Fuzz_NewLiveChatModeratorsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewLiveChatModeratorsService(s)
	})
}

func Fuzz_NewLiveStreamsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewLiveStreamsService(s)
	})
}

func Fuzz_NewMembersService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewMembersService(s)
	})
}

func Fuzz_NewMembershipsLevelsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewMembershipsLevelsService(s)
	})
}

func Fuzz_NewPlaylistImagesService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewPlaylistImagesService(s)
	})
}

func Fuzz_NewPlaylistItemsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewPlaylistItemsService(s)
	})
}

func Fuzz_NewPlaylistsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewPlaylistsService(s)
	})
}

func Fuzz_NewSearchService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewSearchService(s)
	})
}

// skipping Fuzz_NewService because parameters include func, chan, or unsupported interface: []google.golang.org/api/option.ClientOption

func Fuzz_NewSubscriptionsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewSubscriptionsService(s)
	})
}

func Fuzz_NewSuperChatEventsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewSuperChatEventsService(s)
	})
}

func Fuzz_NewTestsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewTestsService(s)
	})
}

func Fuzz_NewThirdPartyLinksService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewThirdPartyLinksService(s)
	})
}

func Fuzz_NewThumbnailsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewThumbnailsService(s)
	})
}

func Fuzz_NewVideoAbuseReportReasonsService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewVideoAbuseReportReasonsService(s)
	})
}

func Fuzz_NewVideoCategoriesService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewVideoCategoriesService(s)
	})
}

func Fuzz_NewVideosService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewVideosService(s)
	})
}

func Fuzz_NewWatermarksService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewWatermarksService(s)
	})
}

func Fuzz_NewYoutubeService(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewYoutubeService(s)
	})
}

func Fuzz_NewYoutubeV3Service(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *youtube.Service
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&s)
		if s == nil {
			return
		}

		youtube.NewYoutubeV3Service(s)
	})
}
