// Code generated by mockery v2.51.1. DO NOT EDIT.

package slog

import (
	context "context"
	slog "log/slog"

	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Enabled provides a mock function with given fields: _a0, _a1
func (_m *MockHandler) Enabled(_a0 context.Context, _a1 slog.Level) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, slog.Level) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockHandler_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type MockHandler_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 slog.Level
func (_e *MockHandler_Expecter) Enabled(_a0 interface{}, _a1 interface{}) *MockHandler_Enabled_Call {
	return &MockHandler_Enabled_Call{Call: _e.mock.On("Enabled", _a0, _a1)}
}

func (_c *MockHandler_Enabled_Call) Run(run func(_a0 context.Context, _a1 slog.Level)) *MockHandler_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slog.Level))
	})
	return _c
}

func (_c *MockHandler_Enabled_Call) Return(_a0 bool) *MockHandler_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Enabled_Call) RunAndReturn(run func(context.Context, slog.Level) bool) *MockHandler_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: _a0, _a1
func (_m *MockHandler) Handle(_a0 context.Context, _a1 slog.Record) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, slog.Record) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 slog.Record
func (_e *MockHandler_Expecter) Handle(_a0 interface{}, _a1 interface{}) *MockHandler_Handle_Call {
	return &MockHandler_Handle_Call{Call: _e.mock.On("Handle", _a0, _a1)}
}

func (_c *MockHandler_Handle_Call) Run(run func(_a0 context.Context, _a1 slog.Record)) *MockHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(slog.Record))
	})
	return _c
}

func (_c *MockHandler_Handle_Call) Return(_a0 error) *MockHandler_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Handle_Call) RunAndReturn(run func(context.Context, slog.Record) error) *MockHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// WithAttrs provides a mock function with given fields: attrs
func (_m *MockHandler) WithAttrs(attrs []slog.Attr) slog.Handler {
	ret := _m.Called(attrs)

	if len(ret) == 0 {
		panic("no return value specified for WithAttrs")
	}

	var r0 slog.Handler
	if rf, ok := ret.Get(0).(func([]slog.Attr) slog.Handler); ok {
		r0 = rf(attrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(slog.Handler)
		}
	}

	return r0
}

// MockHandler_WithAttrs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithAttrs'
type MockHandler_WithAttrs_Call struct {
	*mock.Call
}

// WithAttrs is a helper method to define mock.On call
//   - attrs []slog.Attr
func (_e *MockHandler_Expecter) WithAttrs(attrs interface{}) *MockHandler_WithAttrs_Call {
	return &MockHandler_WithAttrs_Call{Call: _e.mock.On("WithAttrs", attrs)}
}

func (_c *MockHandler_WithAttrs_Call) Run(run func(attrs []slog.Attr)) *MockHandler_WithAttrs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]slog.Attr))
	})
	return _c
}

func (_c *MockHandler_WithAttrs_Call) Return(_a0 slog.Handler) *MockHandler_WithAttrs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_WithAttrs_Call) RunAndReturn(run func([]slog.Attr) slog.Handler) *MockHandler_WithAttrs_Call {
	_c.Call.Return(run)
	return _c
}

// WithGroup provides a mock function with given fields: name
func (_m *MockHandler) WithGroup(name string) slog.Handler {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for WithGroup")
	}

	var r0 slog.Handler
	if rf, ok := ret.Get(0).(func(string) slog.Handler); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(slog.Handler)
		}
	}

	return r0
}

// MockHandler_WithGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithGroup'
type MockHandler_WithGroup_Call struct {
	*mock.Call
}

// WithGroup is a helper method to define mock.On call
//   - name string
func (_e *MockHandler_Expecter) WithGroup(name interface{}) *MockHandler_WithGroup_Call {
	return &MockHandler_WithGroup_Call{Call: _e.mock.On("WithGroup", name)}
}

func (_c *MockHandler_WithGroup_Call) Run(run func(name string)) *MockHandler_WithGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHandler_WithGroup_Call) Return(_a0 slog.Handler) *MockHandler_WithGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_WithGroup_Call) RunAndReturn(run func(string) slog.Handler) *MockHandler_WithGroup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
