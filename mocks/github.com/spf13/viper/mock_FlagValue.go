// Code generated by mockery v2.51.1. DO NOT EDIT.

package viper

import mock "github.com/stretchr/testify/mock"

// MockFlagValue is an autogenerated mock type for the FlagValue type
type MockFlagValue struct {
	mock.Mock
}

type MockFlagValue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFlagValue) EXPECT() *MockFlagValue_Expecter {
	return &MockFlagValue_Expecter{mock: &_m.Mock}
}

// HasChanged provides a mock function with no fields
func (_m *MockFlagValue) HasChanged() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasChanged")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFlagValue_HasChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasChanged'
type MockFlagValue_HasChanged_Call struct {
	*mock.Call
}

// HasChanged is a helper method to define mock.On call
func (_e *MockFlagValue_Expecter) HasChanged() *MockFlagValue_HasChanged_Call {
	return &MockFlagValue_HasChanged_Call{Call: _e.mock.On("HasChanged")}
}

func (_c *MockFlagValue_HasChanged_Call) Run(run func()) *MockFlagValue_HasChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFlagValue_HasChanged_Call) Return(_a0 bool) *MockFlagValue_HasChanged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFlagValue_HasChanged_Call) RunAndReturn(run func() bool) *MockFlagValue_HasChanged_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockFlagValue) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFlagValue_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockFlagValue_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockFlagValue_Expecter) Name() *MockFlagValue_Name_Call {
	return &MockFlagValue_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockFlagValue_Name_Call) Run(run func()) *MockFlagValue_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFlagValue_Name_Call) Return(_a0 string) *MockFlagValue_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFlagValue_Name_Call) RunAndReturn(run func() string) *MockFlagValue_Name_Call {
	_c.Call.Return(run)
	return _c
}

// ValueString provides a mock function with no fields
func (_m *MockFlagValue) ValueString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValueString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFlagValue_ValueString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValueString'
type MockFlagValue_ValueString_Call struct {
	*mock.Call
}

// ValueString is a helper method to define mock.On call
func (_e *MockFlagValue_Expecter) ValueString() *MockFlagValue_ValueString_Call {
	return &MockFlagValue_ValueString_Call{Call: _e.mock.On("ValueString")}
}

func (_c *MockFlagValue_ValueString_Call) Run(run func()) *MockFlagValue_ValueString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFlagValue_ValueString_Call) Return(_a0 string) *MockFlagValue_ValueString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFlagValue_ValueString_Call) RunAndReturn(run func() string) *MockFlagValue_ValueString_Call {
	_c.Call.Return(run)
	return _c
}

// ValueType provides a mock function with no fields
func (_m *MockFlagValue) ValueType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValueType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFlagValue_ValueType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValueType'
type MockFlagValue_ValueType_Call struct {
	*mock.Call
}

// ValueType is a helper method to define mock.On call
func (_e *MockFlagValue_Expecter) ValueType() *MockFlagValue_ValueType_Call {
	return &MockFlagValue_ValueType_Call{Call: _e.mock.On("ValueType")}
}

func (_c *MockFlagValue_ValueType_Call) Run(run func()) *MockFlagValue_ValueType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFlagValue_ValueType_Call) Return(_a0 string) *MockFlagValue_ValueType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFlagValue_ValueType_Call) RunAndReturn(run func() string) *MockFlagValue_ValueType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFlagValue creates a new instance of MockFlagValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFlagValue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFlagValue {
	mock := &MockFlagValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
