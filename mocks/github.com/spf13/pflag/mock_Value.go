// Code generated by mockery v2.51.1. DO NOT EDIT.

package pflag

import mock "github.com/stretchr/testify/mock"

// MockValue is an autogenerated mock type for the Value type
type MockValue struct {
	mock.Mock
}

type MockValue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValue) EXPECT() *MockValue_Expecter {
	return &MockValue_Expecter{mock: &_m.Mock}
}

// Set provides a mock function with given fields: _a0
func (_m *MockValue) Set(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockValue_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockValue_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - _a0 string
func (_e *MockValue_Expecter) Set(_a0 interface{}) *MockValue_Set_Call {
	return &MockValue_Set_Call{Call: _e.mock.On("Set", _a0)}
}

func (_c *MockValue_Set_Call) Run(run func(_a0 string)) *MockValue_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockValue_Set_Call) Return(_a0 error) *MockValue_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValue_Set_Call) RunAndReturn(run func(string) error) *MockValue_Set_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockValue) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockValue_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockValue_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockValue_Expecter) String() *MockValue_String_Call {
	return &MockValue_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockValue_String_Call) Run(run func()) *MockValue_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_String_Call) Return(_a0 string) *MockValue_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValue_String_Call) RunAndReturn(run func() string) *MockValue_String_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *MockValue) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockValue_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockValue_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockValue_Expecter) Type() *MockValue_Type_Call {
	return &MockValue_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockValue_Type_Call) Run(run func()) *MockValue_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValue_Type_Call) Return(_a0 string) *MockValue_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockValue_Type_Call) RunAndReturn(run func() string) *MockValue_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockValue creates a new instance of MockValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValue {
	mock := &MockValue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
