// Code generated by mockery v2.51.1. DO NOT EDIT.

package securejoin

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockVFS is an autogenerated mock type for the VFS type
type MockVFS struct {
	mock.Mock
}

type MockVFS_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVFS) EXPECT() *MockVFS_Expecter {
	return &MockVFS_Expecter{mock: &_m.Mock}
}

// Lstat provides a mock function with given fields: name
func (_m *MockVFS) Lstat(name string) (fs.FileInfo, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Lstat")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (fs.FileInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVFS_Lstat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lstat'
type MockVFS_Lstat_Call struct {
	*mock.Call
}

// Lstat is a helper method to define mock.On call
//   - name string
func (_e *MockVFS_Expecter) Lstat(name interface{}) *MockVFS_Lstat_Call {
	return &MockVFS_Lstat_Call{Call: _e.mock.On("Lstat", name)}
}

func (_c *MockVFS_Lstat_Call) Run(run func(name string)) *MockVFS_Lstat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockVFS_Lstat_Call) Return(_a0 fs.FileInfo, _a1 error) *MockVFS_Lstat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVFS_Lstat_Call) RunAndReturn(run func(string) (fs.FileInfo, error)) *MockVFS_Lstat_Call {
	_c.Call.Return(run)
	return _c
}

// Readlink provides a mock function with given fields: name
func (_m *MockVFS) Readlink(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Readlink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVFS_Readlink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Readlink'
type MockVFS_Readlink_Call struct {
	*mock.Call
}

// Readlink is a helper method to define mock.On call
//   - name string
func (_e *MockVFS_Expecter) Readlink(name interface{}) *MockVFS_Readlink_Call {
	return &MockVFS_Readlink_Call{Call: _e.mock.On("Readlink", name)}
}

func (_c *MockVFS_Readlink_Call) Run(run func(name string)) *MockVFS_Readlink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockVFS_Readlink_Call) Return(_a0 string, _a1 error) *MockVFS_Readlink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVFS_Readlink_Call) RunAndReturn(run func(string) (string, error)) *MockVFS_Readlink_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVFS creates a new instance of MockVFS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVFS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVFS {
	mock := &MockVFS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
