// Code generated by mockery v2.51.1. DO NOT EDIT.

package jwt

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockClaims is an autogenerated mock type for the Claims type
type MockClaims struct {
	mock.Mock
}

type MockClaims_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClaims) EXPECT() *MockClaims_Expecter {
	return &MockClaims_Expecter{mock: &_m.Mock}
}

// GetAudience provides a mock function with no fields
func (_m *MockClaims) GetAudience() (jwt.ClaimStrings, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAudience")
	}

	var r0 jwt.ClaimStrings
	var r1 error
	if rf, ok := ret.Get(0).(func() (jwt.ClaimStrings, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() jwt.ClaimStrings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.ClaimStrings)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClaims_GetAudience_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAudience'
type MockClaims_GetAudience_Call struct {
	*mock.Call
}

// GetAudience is a helper method to define mock.On call
func (_e *MockClaims_Expecter) GetAudience() *MockClaims_GetAudience_Call {
	return &MockClaims_GetAudience_Call{Call: _e.mock.On("GetAudience")}
}

func (_c *MockClaims_GetAudience_Call) Run(run func()) *MockClaims_GetAudience_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaims_GetAudience_Call) Return(_a0 jwt.ClaimStrings, _a1 error) *MockClaims_GetAudience_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClaims_GetAudience_Call) RunAndReturn(run func() (jwt.ClaimStrings, error)) *MockClaims_GetAudience_Call {
	_c.Call.Return(run)
	return _c
}

// GetExpirationTime provides a mock function with no fields
func (_m *MockClaims) GetExpirationTime() (*jwt.NumericDate, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetExpirationTime")
	}

	var r0 *jwt.NumericDate
	var r1 error
	if rf, ok := ret.Get(0).(func() (*jwt.NumericDate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *jwt.NumericDate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.NumericDate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClaims_GetExpirationTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExpirationTime'
type MockClaims_GetExpirationTime_Call struct {
	*mock.Call
}

// GetExpirationTime is a helper method to define mock.On call
func (_e *MockClaims_Expecter) GetExpirationTime() *MockClaims_GetExpirationTime_Call {
	return &MockClaims_GetExpirationTime_Call{Call: _e.mock.On("GetExpirationTime")}
}

func (_c *MockClaims_GetExpirationTime_Call) Run(run func()) *MockClaims_GetExpirationTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaims_GetExpirationTime_Call) Return(_a0 *jwt.NumericDate, _a1 error) *MockClaims_GetExpirationTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClaims_GetExpirationTime_Call) RunAndReturn(run func() (*jwt.NumericDate, error)) *MockClaims_GetExpirationTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssuedAt provides a mock function with no fields
func (_m *MockClaims) GetIssuedAt() (*jwt.NumericDate, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIssuedAt")
	}

	var r0 *jwt.NumericDate
	var r1 error
	if rf, ok := ret.Get(0).(func() (*jwt.NumericDate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *jwt.NumericDate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.NumericDate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClaims_GetIssuedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssuedAt'
type MockClaims_GetIssuedAt_Call struct {
	*mock.Call
}

// GetIssuedAt is a helper method to define mock.On call
func (_e *MockClaims_Expecter) GetIssuedAt() *MockClaims_GetIssuedAt_Call {
	return &MockClaims_GetIssuedAt_Call{Call: _e.mock.On("GetIssuedAt")}
}

func (_c *MockClaims_GetIssuedAt_Call) Run(run func()) *MockClaims_GetIssuedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaims_GetIssuedAt_Call) Return(_a0 *jwt.NumericDate, _a1 error) *MockClaims_GetIssuedAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClaims_GetIssuedAt_Call) RunAndReturn(run func() (*jwt.NumericDate, error)) *MockClaims_GetIssuedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssuer provides a mock function with no fields
func (_m *MockClaims) GetIssuer() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIssuer")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClaims_GetIssuer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssuer'
type MockClaims_GetIssuer_Call struct {
	*mock.Call
}

// GetIssuer is a helper method to define mock.On call
func (_e *MockClaims_Expecter) GetIssuer() *MockClaims_GetIssuer_Call {
	return &MockClaims_GetIssuer_Call{Call: _e.mock.On("GetIssuer")}
}

func (_c *MockClaims_GetIssuer_Call) Run(run func()) *MockClaims_GetIssuer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaims_GetIssuer_Call) Return(_a0 string, _a1 error) *MockClaims_GetIssuer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClaims_GetIssuer_Call) RunAndReturn(run func() (string, error)) *MockClaims_GetIssuer_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotBefore provides a mock function with no fields
func (_m *MockClaims) GetNotBefore() (*jwt.NumericDate, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotBefore")
	}

	var r0 *jwt.NumericDate
	var r1 error
	if rf, ok := ret.Get(0).(func() (*jwt.NumericDate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *jwt.NumericDate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.NumericDate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClaims_GetNotBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotBefore'
type MockClaims_GetNotBefore_Call struct {
	*mock.Call
}

// GetNotBefore is a helper method to define mock.On call
func (_e *MockClaims_Expecter) GetNotBefore() *MockClaims_GetNotBefore_Call {
	return &MockClaims_GetNotBefore_Call{Call: _e.mock.On("GetNotBefore")}
}

func (_c *MockClaims_GetNotBefore_Call) Run(run func()) *MockClaims_GetNotBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaims_GetNotBefore_Call) Return(_a0 *jwt.NumericDate, _a1 error) *MockClaims_GetNotBefore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClaims_GetNotBefore_Call) RunAndReturn(run func() (*jwt.NumericDate, error)) *MockClaims_GetNotBefore_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubject provides a mock function with no fields
func (_m *MockClaims) GetSubject() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSubject")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClaims_GetSubject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubject'
type MockClaims_GetSubject_Call struct {
	*mock.Call
}

// GetSubject is a helper method to define mock.On call
func (_e *MockClaims_Expecter) GetSubject() *MockClaims_GetSubject_Call {
	return &MockClaims_GetSubject_Call{Call: _e.mock.On("GetSubject")}
}

func (_c *MockClaims_GetSubject_Call) Run(run func()) *MockClaims_GetSubject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClaims_GetSubject_Call) Return(_a0 string, _a1 error) *MockClaims_GetSubject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClaims_GetSubject_Call) RunAndReturn(run func() (string, error)) *MockClaims_GetSubject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClaims creates a new instance of MockClaims. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClaims(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClaims {
	mock := &MockClaims{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
