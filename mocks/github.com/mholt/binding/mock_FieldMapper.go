// Code generated by mockery v2.53.0. DO NOT EDIT.

package binding

import (
	http "net/http"

	binding "github.com/mholt/binding"

	mock "github.com/stretchr/testify/mock"
)

// MockFieldMapper is an autogenerated mock type for the FieldMapper type
type MockFieldMapper struct {
	mock.Mock
}

type MockFieldMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFieldMapper) EXPECT() *MockFieldMapper_Expecter {
	return &MockFieldMapper_Expecter{mock: &_m.Mock}
}

// FieldMap provides a mock function with given fields: _a0
func (_m *MockFieldMapper) FieldMap(_a0 *http.Request) binding.FieldMap {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FieldMap")
	}

	var r0 binding.FieldMap
	if rf, ok := ret.Get(0).(func(*http.Request) binding.FieldMap); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(binding.FieldMap)
		}
	}

	return r0
}

// MockFieldMapper_FieldMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FieldMap'
type MockFieldMapper_FieldMap_Call struct {
	*mock.Call
}

// FieldMap is a helper method to define mock.On call
//   - _a0 *http.Request
func (_e *MockFieldMapper_Expecter) FieldMap(_a0 interface{}) *MockFieldMapper_FieldMap_Call {
	return &MockFieldMapper_FieldMap_Call{Call: _e.mock.On("FieldMap", _a0)}
}

func (_c *MockFieldMapper_FieldMap_Call) Run(run func(_a0 *http.Request)) *MockFieldMapper_FieldMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockFieldMapper_FieldMap_Call) Return(_a0 binding.FieldMap) *MockFieldMapper_FieldMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFieldMapper_FieldMap_Call) RunAndReturn(run func(*http.Request) binding.FieldMap) *MockFieldMapper_FieldMap_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFieldMapper creates a new instance of MockFieldMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFieldMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFieldMapper {
	mock := &MockFieldMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
