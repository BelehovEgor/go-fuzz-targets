// Code generated by mockery v2.51.1. DO NOT EDIT.

package zerolog

import (
	zerolog "github.com/rs/zerolog"
	mock "github.com/stretchr/testify/mock"
)

// MockSampler is an autogenerated mock type for the Sampler type
type MockSampler struct {
	mock.Mock
}

type MockSampler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSampler) EXPECT() *MockSampler_Expecter {
	return &MockSampler_Expecter{mock: &_m.Mock}
}

// Sample provides a mock function with given fields: lvl
func (_m *MockSampler) Sample(lvl zerolog.Level) bool {
	ret := _m.Called(lvl)

	if len(ret) == 0 {
		panic("no return value specified for Sample")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(zerolog.Level) bool); ok {
		r0 = rf(lvl)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockSampler_Sample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sample'
type MockSampler_Sample_Call struct {
	*mock.Call
}

// Sample is a helper method to define mock.On call
//   - lvl zerolog.Level
func (_e *MockSampler_Expecter) Sample(lvl interface{}) *MockSampler_Sample_Call {
	return &MockSampler_Sample_Call{Call: _e.mock.On("Sample", lvl)}
}

func (_c *MockSampler_Sample_Call) Run(run func(lvl zerolog.Level)) *MockSampler_Sample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(zerolog.Level))
	})
	return _c
}

func (_c *MockSampler_Sample_Call) Return(_a0 bool) *MockSampler_Sample_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSampler_Sample_Call) RunAndReturn(run func(zerolog.Level) bool) *MockSampler_Sample_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSampler creates a new instance of MockSampler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSampler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSampler {
	mock := &MockSampler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
