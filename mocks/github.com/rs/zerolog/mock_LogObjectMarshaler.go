// Code generated by mockery v2.51.1. DO NOT EDIT.

package zerolog

import (
	zerolog "github.com/rs/zerolog"
	mock "github.com/stretchr/testify/mock"
)

// MockLogObjectMarshaler is an autogenerated mock type for the LogObjectMarshaler type
type MockLogObjectMarshaler struct {
	mock.Mock
}

type MockLogObjectMarshaler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogObjectMarshaler) EXPECT() *MockLogObjectMarshaler_Expecter {
	return &MockLogObjectMarshaler_Expecter{mock: &_m.Mock}
}

// MarshalZerologObject provides a mock function with given fields: e
func (_m *MockLogObjectMarshaler) MarshalZerologObject(e *zerolog.Event) {
	_m.Called(e)
}

// MockLogObjectMarshaler_MarshalZerologObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalZerologObject'
type MockLogObjectMarshaler_MarshalZerologObject_Call struct {
	*mock.Call
}

// MarshalZerologObject is a helper method to define mock.On call
//   - e *zerolog.Event
func (_e *MockLogObjectMarshaler_Expecter) MarshalZerologObject(e interface{}) *MockLogObjectMarshaler_MarshalZerologObject_Call {
	return &MockLogObjectMarshaler_MarshalZerologObject_Call{Call: _e.mock.On("MarshalZerologObject", e)}
}

func (_c *MockLogObjectMarshaler_MarshalZerologObject_Call) Run(run func(e *zerolog.Event)) *MockLogObjectMarshaler_MarshalZerologObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*zerolog.Event))
	})
	return _c
}

func (_c *MockLogObjectMarshaler_MarshalZerologObject_Call) Return() *MockLogObjectMarshaler_MarshalZerologObject_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogObjectMarshaler_MarshalZerologObject_Call) RunAndReturn(run func(*zerolog.Event)) *MockLogObjectMarshaler_MarshalZerologObject_Call {
	_c.Run(run)
	return _c
}

// NewMockLogObjectMarshaler creates a new instance of MockLogObjectMarshaler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogObjectMarshaler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogObjectMarshaler {
	mock := &MockLogObjectMarshaler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
