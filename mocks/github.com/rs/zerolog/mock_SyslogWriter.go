// Code generated by mockery v2.51.1. DO NOT EDIT.

package zerolog

import mock "github.com/stretchr/testify/mock"

// MockSyslogWriter is an autogenerated mock type for the SyslogWriter type
type MockSyslogWriter struct {
	mock.Mock
}

type MockSyslogWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyslogWriter) EXPECT() *MockSyslogWriter_Expecter {
	return &MockSyslogWriter_Expecter{mock: &_m.Mock}
}

// Crit provides a mock function with given fields: m
func (_m *MockSyslogWriter) Crit(m string) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Crit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyslogWriter_Crit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Crit'
type MockSyslogWriter_Crit_Call struct {
	*mock.Call
}

// Crit is a helper method to define mock.On call
//   - m string
func (_e *MockSyslogWriter_Expecter) Crit(m interface{}) *MockSyslogWriter_Crit_Call {
	return &MockSyslogWriter_Crit_Call{Call: _e.mock.On("Crit", m)}
}

func (_c *MockSyslogWriter_Crit_Call) Run(run func(m string)) *MockSyslogWriter_Crit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSyslogWriter_Crit_Call) Return(_a0 error) *MockSyslogWriter_Crit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyslogWriter_Crit_Call) RunAndReturn(run func(string) error) *MockSyslogWriter_Crit_Call {
	_c.Call.Return(run)
	return _c
}

// Debug provides a mock function with given fields: m
func (_m *MockSyslogWriter) Debug(m string) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Debug")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyslogWriter_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockSyslogWriter_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - m string
func (_e *MockSyslogWriter_Expecter) Debug(m interface{}) *MockSyslogWriter_Debug_Call {
	return &MockSyslogWriter_Debug_Call{Call: _e.mock.On("Debug", m)}
}

func (_c *MockSyslogWriter_Debug_Call) Run(run func(m string)) *MockSyslogWriter_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSyslogWriter_Debug_Call) Return(_a0 error) *MockSyslogWriter_Debug_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyslogWriter_Debug_Call) RunAndReturn(run func(string) error) *MockSyslogWriter_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Emerg provides a mock function with given fields: m
func (_m *MockSyslogWriter) Emerg(m string) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Emerg")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyslogWriter_Emerg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emerg'
type MockSyslogWriter_Emerg_Call struct {
	*mock.Call
}

// Emerg is a helper method to define mock.On call
//   - m string
func (_e *MockSyslogWriter_Expecter) Emerg(m interface{}) *MockSyslogWriter_Emerg_Call {
	return &MockSyslogWriter_Emerg_Call{Call: _e.mock.On("Emerg", m)}
}

func (_c *MockSyslogWriter_Emerg_Call) Run(run func(m string)) *MockSyslogWriter_Emerg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSyslogWriter_Emerg_Call) Return(_a0 error) *MockSyslogWriter_Emerg_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyslogWriter_Emerg_Call) RunAndReturn(run func(string) error) *MockSyslogWriter_Emerg_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function with given fields: m
func (_m *MockSyslogWriter) Err(m string) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyslogWriter_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockSyslogWriter_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
//   - m string
func (_e *MockSyslogWriter_Expecter) Err(m interface{}) *MockSyslogWriter_Err_Call {
	return &MockSyslogWriter_Err_Call{Call: _e.mock.On("Err", m)}
}

func (_c *MockSyslogWriter_Err_Call) Run(run func(m string)) *MockSyslogWriter_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSyslogWriter_Err_Call) Return(_a0 error) *MockSyslogWriter_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyslogWriter_Err_Call) RunAndReturn(run func(string) error) *MockSyslogWriter_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: m
func (_m *MockSyslogWriter) Info(m string) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyslogWriter_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockSyslogWriter_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - m string
func (_e *MockSyslogWriter_Expecter) Info(m interface{}) *MockSyslogWriter_Info_Call {
	return &MockSyslogWriter_Info_Call{Call: _e.mock.On("Info", m)}
}

func (_c *MockSyslogWriter_Info_Call) Run(run func(m string)) *MockSyslogWriter_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSyslogWriter_Info_Call) Return(_a0 error) *MockSyslogWriter_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyslogWriter_Info_Call) RunAndReturn(run func(string) error) *MockSyslogWriter_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Warning provides a mock function with given fields: m
func (_m *MockSyslogWriter) Warning(m string) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for Warning")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyslogWriter_Warning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warning'
type MockSyslogWriter_Warning_Call struct {
	*mock.Call
}

// Warning is a helper method to define mock.On call
//   - m string
func (_e *MockSyslogWriter_Expecter) Warning(m interface{}) *MockSyslogWriter_Warning_Call {
	return &MockSyslogWriter_Warning_Call{Call: _e.mock.On("Warning", m)}
}

func (_c *MockSyslogWriter_Warning_Call) Run(run func(m string)) *MockSyslogWriter_Warning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSyslogWriter_Warning_Call) Return(_a0 error) *MockSyslogWriter_Warning_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyslogWriter_Warning_Call) RunAndReturn(run func(string) error) *MockSyslogWriter_Warning_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: p
func (_m *MockSyslogWriter) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyslogWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockSyslogWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *MockSyslogWriter_Expecter) Write(p interface{}) *MockSyslogWriter_Write_Call {
	return &MockSyslogWriter_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *MockSyslogWriter_Write_Call) Run(run func(p []byte)) *MockSyslogWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockSyslogWriter_Write_Call) Return(n int, err error) *MockSyslogWriter_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSyslogWriter_Write_Call) RunAndReturn(run func([]byte) (int, error)) *MockSyslogWriter_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSyslogWriter creates a new instance of MockSyslogWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyslogWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyslogWriter {
	mock := &MockSyslogWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
