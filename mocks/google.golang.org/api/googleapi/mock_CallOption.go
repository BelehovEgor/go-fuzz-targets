// Code generated by mockery v2.51.1. DO NOT EDIT.

package googleapi

import mock "github.com/stretchr/testify/mock"

// MockCallOption is an autogenerated mock type for the CallOption type
type MockCallOption struct {
	mock.Mock
}

type MockCallOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCallOption) EXPECT() *MockCallOption_Expecter {
	return &MockCallOption_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with no fields
func (_m *MockCallOption) Get() (string, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func() (string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// MockCallOption_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCallOption_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockCallOption_Expecter) Get() *MockCallOption_Get_Call {
	return &MockCallOption_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockCallOption_Get_Call) Run(run func()) *MockCallOption_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCallOption_Get_Call) Return(key string, value string) *MockCallOption_Get_Call {
	_c.Call.Return(key, value)
	return _c
}

func (_c *MockCallOption_Get_Call) RunAndReturn(run func() (string, string)) *MockCallOption_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCallOption creates a new instance of MockCallOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCallOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCallOption {
	mock := &MockCallOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
