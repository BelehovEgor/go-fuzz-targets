// Code generated by mockery v2.51.1. DO NOT EDIT.

package http

import (
	http "net/http"
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// MockCookieJar is an autogenerated mock type for the CookieJar type
type MockCookieJar struct {
	mock.Mock
}

type MockCookieJar_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCookieJar) EXPECT() *MockCookieJar_Expecter {
	return &MockCookieJar_Expecter{mock: &_m.Mock}
}

// Cookies provides a mock function with given fields: u
func (_m *MockCookieJar) Cookies(u *url.URL) []*http.Cookie {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Cookies")
	}

	var r0 []*http.Cookie
	if rf, ok := ret.Get(0).(func(*url.URL) []*http.Cookie); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*http.Cookie)
		}
	}

	return r0
}

// MockCookieJar_Cookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookies'
type MockCookieJar_Cookies_Call struct {
	*mock.Call
}

// Cookies is a helper method to define mock.On call
//   - u *url.URL
func (_e *MockCookieJar_Expecter) Cookies(u interface{}) *MockCookieJar_Cookies_Call {
	return &MockCookieJar_Cookies_Call{Call: _e.mock.On("Cookies", u)}
}

func (_c *MockCookieJar_Cookies_Call) Run(run func(u *url.URL)) *MockCookieJar_Cookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*url.URL))
	})
	return _c
}

func (_c *MockCookieJar_Cookies_Call) Return(_a0 []*http.Cookie) *MockCookieJar_Cookies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCookieJar_Cookies_Call) RunAndReturn(run func(*url.URL) []*http.Cookie) *MockCookieJar_Cookies_Call {
	_c.Call.Return(run)
	return _c
}

// SetCookies provides a mock function with given fields: u, cookies
func (_m *MockCookieJar) SetCookies(u *url.URL, cookies []*http.Cookie) {
	_m.Called(u, cookies)
}

// MockCookieJar_SetCookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCookies'
type MockCookieJar_SetCookies_Call struct {
	*mock.Call
}

// SetCookies is a helper method to define mock.On call
//   - u *url.URL
//   - cookies []*http.Cookie
func (_e *MockCookieJar_Expecter) SetCookies(u interface{}, cookies interface{}) *MockCookieJar_SetCookies_Call {
	return &MockCookieJar_SetCookies_Call{Call: _e.mock.On("SetCookies", u, cookies)}
}

func (_c *MockCookieJar_SetCookies_Call) Run(run func(u *url.URL, cookies []*http.Cookie)) *MockCookieJar_SetCookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*url.URL), args[1].([]*http.Cookie))
	})
	return _c
}

func (_c *MockCookieJar_SetCookies_Call) Return() *MockCookieJar_SetCookies_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCookieJar_SetCookies_Call) RunAndReturn(run func(*url.URL, []*http.Cookie)) *MockCookieJar_SetCookies_Call {
	_c.Run(run)
	return _c
}

// NewMockCookieJar creates a new instance of MockCookieJar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCookieJar(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCookieJar {
	mock := &MockCookieJar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
