// Code generated by mockery v2.51.1. DO NOT EDIT.

package propagation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	propagation "go.opentelemetry.io/otel/propagation"
)

// MockTextMapPropagator is an autogenerated mock type for the TextMapPropagator type
type MockTextMapPropagator struct {
	mock.Mock
}

type MockTextMapPropagator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTextMapPropagator) EXPECT() *MockTextMapPropagator_Expecter {
	return &MockTextMapPropagator_Expecter{mock: &_m.Mock}
}

// Extract provides a mock function with given fields: ctx, carrier
func (_m *MockTextMapPropagator) Extract(ctx context.Context, carrier propagation.TextMapCarrier) context.Context {
	ret := _m.Called(ctx, carrier)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, propagation.TextMapCarrier) context.Context); ok {
		r0 = rf(ctx, carrier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockTextMapPropagator_Extract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extract'
type MockTextMapPropagator_Extract_Call struct {
	*mock.Call
}

// Extract is a helper method to define mock.On call
//   - ctx context.Context
//   - carrier propagation.TextMapCarrier
func (_e *MockTextMapPropagator_Expecter) Extract(ctx interface{}, carrier interface{}) *MockTextMapPropagator_Extract_Call {
	return &MockTextMapPropagator_Extract_Call{Call: _e.mock.On("Extract", ctx, carrier)}
}

func (_c *MockTextMapPropagator_Extract_Call) Run(run func(ctx context.Context, carrier propagation.TextMapCarrier)) *MockTextMapPropagator_Extract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(propagation.TextMapCarrier))
	})
	return _c
}

func (_c *MockTextMapPropagator_Extract_Call) Return(_a0 context.Context) *MockTextMapPropagator_Extract_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTextMapPropagator_Extract_Call) RunAndReturn(run func(context.Context, propagation.TextMapCarrier) context.Context) *MockTextMapPropagator_Extract_Call {
	_c.Call.Return(run)
	return _c
}

// Fields provides a mock function with no fields
func (_m *MockTextMapPropagator) Fields() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fields")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockTextMapPropagator_Fields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fields'
type MockTextMapPropagator_Fields_Call struct {
	*mock.Call
}

// Fields is a helper method to define mock.On call
func (_e *MockTextMapPropagator_Expecter) Fields() *MockTextMapPropagator_Fields_Call {
	return &MockTextMapPropagator_Fields_Call{Call: _e.mock.On("Fields")}
}

func (_c *MockTextMapPropagator_Fields_Call) Run(run func()) *MockTextMapPropagator_Fields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTextMapPropagator_Fields_Call) Return(_a0 []string) *MockTextMapPropagator_Fields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTextMapPropagator_Fields_Call) RunAndReturn(run func() []string) *MockTextMapPropagator_Fields_Call {
	_c.Call.Return(run)
	return _c
}

// Inject provides a mock function with given fields: ctx, carrier
func (_m *MockTextMapPropagator) Inject(ctx context.Context, carrier propagation.TextMapCarrier) {
	_m.Called(ctx, carrier)
}

// MockTextMapPropagator_Inject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inject'
type MockTextMapPropagator_Inject_Call struct {
	*mock.Call
}

// Inject is a helper method to define mock.On call
//   - ctx context.Context
//   - carrier propagation.TextMapCarrier
func (_e *MockTextMapPropagator_Expecter) Inject(ctx interface{}, carrier interface{}) *MockTextMapPropagator_Inject_Call {
	return &MockTextMapPropagator_Inject_Call{Call: _e.mock.On("Inject", ctx, carrier)}
}

func (_c *MockTextMapPropagator_Inject_Call) Run(run func(ctx context.Context, carrier propagation.TextMapCarrier)) *MockTextMapPropagator_Inject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(propagation.TextMapCarrier))
	})
	return _c
}

func (_c *MockTextMapPropagator_Inject_Call) Return() *MockTextMapPropagator_Inject_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTextMapPropagator_Inject_Call) RunAndReturn(run func(context.Context, propagation.TextMapCarrier)) *MockTextMapPropagator_Inject_Call {
	_c.Run(run)
	return _c
}

// NewMockTextMapPropagator creates a new instance of MockTextMapPropagator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTextMapPropagator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTextMapPropagator {
	mock := &MockTextMapPropagator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
