package tests

// Edit if desired. Code generated by "fzgen github.com/smallnest/chanx".

import (
	"github.com/smallnest/chanx"
	"testing"
)

func Fuzz_RingBufferCapacity(f *testing.F) {
	f.Add(1)
	f.Add(10)
	f.Add(15)
	f.Add(100)

	f.Fuzz(func(t *testing.T, initialSize int) {
		r := chanx.NewRingBuffer[int](initialSize)
		r.Capacity()
	})
}

/*
func Fuzz_RingBuffer[T any]_IsEmpty(f *testing.F) {
	f.Fuzz(func(t *testing.T, initialSize int) {
	r := chanx.NewRingBuffer(initialSize)
	r.IsEmpty()
	})
}

func Fuzz_RingBuffer[T any]_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, initialSize int) {
	r := chanx.NewRingBuffer(initialSize)
	r.Len()
	})
}

func Fuzz_RingBuffer[T any]_Peek(f *testing.F) {
	f.Fuzz(func(t *testing.T, initialSize int) {
	r := chanx.NewRingBuffer(initialSize)
	r.Peek()
	})
}

func Fuzz_RingBuffer[T any]_Pop(f *testing.F) {
	f.Fuzz(func(t *testing.T, initialSize int) {
	r := chanx.NewRingBuffer(initialSize)
	r.Pop()
	})
}

func Fuzz_RingBuffer[T any]_Read(f *testing.F) {
	f.Fuzz(func(t *testing.T, initialSize int) {
	r := chanx.NewRingBuffer(initialSize)
	r.Read()
	})
}

func Fuzz_RingBuffer[T any]_Reset(f *testing.F) {
	f.Fuzz(func(t *testing.T, initialSize int) {
	r := chanx.NewRingBuffer(initialSize)
	r.Reset()
	})
}

// skipping Fuzz_RingBuffer[T any]_Write because parameters include func, chan, or unsupported interface: T

func Fuzz_UnboundedChan[T any]_BufLen(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var initCapacity int
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &initCapacity)

	c := chanx.NewUnboundedChan(ctx, initCapacity)
	c.BufLen()
	})
}

func Fuzz_UnboundedChan[T any]_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var initCapacity int
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &initCapacity)

	c := chanx.NewUnboundedChan(ctx, initCapacity)
	c.Len()
	})
}

func Fuzz_NewRingBuffer(f *testing.F) {
	f.Fuzz(func(t *testing.T, initialSize int) {
	chanx.NewRingBuffer(initialSize)
	})
}

func Fuzz_NewUnboundedChanSize(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var initInCapacity int
		var initOutCapacity int
		var initBufCapacity int
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &initInCapacity, &initOutCapacity, &initBufCapacity)

	chanx.NewUnboundedChanSize(ctx, initInCapacity, initOutCapacity, initBufCapacity)
	})
}

func Fuzz_NewUnboundedChan(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var ctx context.Context
		var initCapacity int
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&ctx, &initCapacity)

	chanx.NewUnboundedChan(ctx, initCapacity)
	})
}*/
