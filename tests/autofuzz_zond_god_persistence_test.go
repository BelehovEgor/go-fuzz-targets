package tests

// Edit if desired. Code generated by "fzgen github.com/zond/god/persistence".

import (
	"testing"

	"github.com/thepudds/fzgen/fuzzer"
	"github.com/zond/god/persistence"
)

func Fuzz_Logger_Clear(f *testing.F) {
	f.Add("path")
	f.Fuzz(func(t *testing.T, dir string) {
		self := persistence.NewLogger(dir)
		self.Clear()
	})
}

func Fuzz_Logger_Dump(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dir string
		var o persistence.Op
		fz := fuzzer.NewFuzzer(data)
		fz.Fill(&dir, &o)

		self := persistence.NewLogger(dir)
		self.Dump(o)
	})
}

func Fuzz_Logger_Limit(f *testing.F) {
	f.Fuzz(func(t *testing.T, dir string, maxSize int64) {
		self := persistence.NewLogger(dir)
		self.Limit(maxSize)
	})
}

// skipping Fuzz_Logger_Play because parameters include func, chan, or unsupported interface: github.com/zond/god/persistence.Operate

func Fuzz_Logger_Record(f *testing.F) {
	f.Fuzz(func(t *testing.T, dir string) {
		self := persistence.NewLogger(dir)
		self.Record()
	})
}

func Fuzz_Logger_Recording(f *testing.F) {
	f.Fuzz(func(t *testing.T, dir string) {
		self := persistence.NewLogger(dir)
		self.Recording()
	})
}

func Fuzz_Logger_Stop(f *testing.F) {
	f.Fuzz(func(t *testing.T, dir string) {
		self := persistence.NewLogger(dir)
		self.Stop()
	})
}

func Fuzz_NewLogger(f *testing.F) {
	f.Fuzz(func(t *testing.T, dir string) {
		persistence.NewLogger(dir)
	})
}
