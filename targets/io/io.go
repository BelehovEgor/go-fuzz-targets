package main

// Edit if desired. Code generated by "fzgen --llm=groq -o=io.go io".
// false
// func keyword

import (
	io "io"
	"reflect"
	"testing"

	"github.com/BelehovEgor/fzgen/fuzzer"
)

func Fuzz_N1_LimitedReader_Read(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var l *io.LimitedReader
		var p []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&l, &p)
		if err != nil || l == nil {
			return
		}

		l.Read(p)
	})
}

func Fuzz_N2_OffsetWriter_Seek(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var o *io.OffsetWriter
		var offset int64
		var whence int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&o, &offset, &whence)
		if err != nil || o == nil {
			return
		}

		o.Seek(offset, whence)
	})
}

func Fuzz_N3_OffsetWriter_Write(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var o *io.OffsetWriter
		var p []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&o, &p)
		if err != nil || o == nil {
			return
		}

		o.Write(p)
	})
}

func Fuzz_N4_OffsetWriter_WriteAt(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var o *io.OffsetWriter
		var p []byte
		var off int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&o, &p, &off)
		if err != nil || o == nil {
			return
		}

		o.WriteAt(p, off)
	})
}

func Fuzz_N5_PipeReader_Close(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r *io.PipeReader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&r)
		if err != nil || r == nil {
			return
		}

		r.Close()
	})
}

func Fuzz_N6_PipeReader_CloseWithError(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r *io.PipeReader
		var err error
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err_1 := fz.Fill2(&r, &err)
		if err_1 != nil || r == nil {
			return
		}

		r.CloseWithError(err)
	})
}

func Fuzz_N7_PipeReader_Read(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r *io.PipeReader
		var data_0 []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&r, &data_0)
		if err != nil || r == nil {
			return
		}

		r.Read(data_0)
	})
}

func Fuzz_N8_PipeWriter_Close(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w *io.PipeWriter
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&w)
		if err != nil || w == nil {
			return
		}

		w.Close()
	})
}

func Fuzz_N9_PipeWriter_CloseWithError(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w *io.PipeWriter
		var err error
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err_1 := fz.Fill2(&w, &err)
		if err_1 != nil || w == nil {
			return
		}

		w.CloseWithError(err)
	})
}

func Fuzz_N10_PipeWriter_Write(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w *io.PipeWriter
		var data_0 []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&w, &data_0)
		if err != nil || w == nil {
			return
		}

		w.Write(data_0)
	})
}

func Fuzz_N11_SectionReader_Outer(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *io.SectionReader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&s)
		if err != nil || s == nil {
			return
		}

		s.Outer()
	})
}

func Fuzz_N12_SectionReader_Read(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *io.SectionReader
		var p []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&s, &p)
		if err != nil || s == nil {
			return
		}

		s.Read(p)
	})
}

func Fuzz_N13_SectionReader_ReadAt(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *io.SectionReader
		var p []byte
		var off int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&s, &p, &off)
		if err != nil || s == nil {
			return
		}

		s.ReadAt(p, off)
	})
}

func Fuzz_N14_SectionReader_Seek(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *io.SectionReader
		var offset int64
		var whence int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&s, &offset, &whence)
		if err != nil || s == nil {
			return
		}

		s.Seek(offset, whence)
	})
}

func Fuzz_N15_SectionReader_Size(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var s *io.SectionReader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&s)
		if err != nil || s == nil {
			return
		}

		s.Size()
	})
}

func Fuzz_N16_Copy(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dst io.Writer
		var src io.Reader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&dst, &src)
		if err != nil {
			t.Log("Failed to fill data")
			return
		}

		if dst == nil || src == nil {
			t.Log("Invalid nil arguments")
			return
		}

		written, err := io.Copy(dst, src)
		if err != nil {
			if err.Error() != "EOF" {
				t.Error("Unexpected error during Copy")
			}
		} else if written < 0 {
			t.Error("Negative bytes written")
		}
	})

	f.Fuzz(func(t *testing.T, data []byte, n int64) {
		var dst io.Writer
		var src io.Reader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&dst, &src)
		if err != nil {
			t.Log("Failed to fill data")
			return
		}

		if dst == nil || src == nil {
			t.Log("Invalid nil arguments")
			return
		}

		written, err := io.CopyN(dst, src, n)
		if err != nil {
			if err.Error() != "EOF" {
				t.Error("Unexpected error during CopyN")
			}
		} else if written != n {
			t.Error("Incorrect number of bytes written")
		}
	})
}

func Fuzz_N17_CopyBuffer(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dst io.Writer
		var src io.Reader
		var buf []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&dst, &src, &buf)
		if err != nil {
			return
		}

		if buf != nil && len(buf) == 0 {
			t.Skip()
		}

		written, err := io.CopyBuffer(dst, src, buf)
		if err != nil {
			t.Log("Error from CopyBuffer")
			return
		}

		if written < 0 {
			t.Error("Negative written value from CopyBuffer")
		}
	})
}

func Fuzz_N18_CopyN(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dst io.Writer
		var src io.Reader
		var n int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&dst, &src, &n)
		if err != nil {
			return
		}

		if dst == nil || src == nil {
			t.Skip("nil dst or src")
		}
		if n < 0 {
			t.Skip("negative n")
		}

		written, err := io.CopyN(dst, src, n)
		if written < 0 {
			t.Error("negative written")
		}
		if written > n {
			t.Error("written more than n")
		}
		if written == n && err != nil {
			t.Error("err != nil when written == n")
		}
		if written < n && err == nil {
			t.Error("err == nil when written < n")
		}
		if err == io.EOF && written == n {
			t.Error("EOF when written == n")
		}
		if err != nil && err != io.EOF && err.Error() != "explicit exception" {
			t.Error("unexpected error")
		}
	})
}

func Fuzz_N19_LimitReader(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		var n int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&r, &n)
		if err != nil {
			return
		}

		if r == nil {
			t.Skip("Reader is nil")
		}
		if n < 0 {
			t.Skip("Negative limit")
		}

		defer func() {
			if r := recover(); r != nil {
				if err, ok := r.(error); ok {
					if err.Error() == "expected error message" {
						t.Skip("Expected error message received")
					}
				}
				t.Error("Unexpected panic")
			}
		}()

		result := io.LimitReader(r, n)
		if result == nil {
			t.Error("LimitReader returned nil")
		}
	})
}

func Fuzz_N20_MultiReader(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var readers []io.Reader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&readers)
		if err != nil {
			return
		}

		if len(readers) == 0 {
			t.Skip("No readers provided")
		}

		for _, reader := range readers {
			if reflect.ValueOf(reader).IsNil() {
				t.Skip("Nil reader found")
			}
		}

		mr := io.MultiReader(readers...)
		_, err = mr.Read(make([]byte, 1))
		if err != nil && err != io.EOF {
			t.Error("Unexpected error from MultiReader")
		}
	})
}

func Fuzz_N21_MultiWriter(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var writers []io.Writer
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&writers)
		if err != nil {
			return
		}

		for _, w := range writers {
			if w == nil {
				t.Skip("Writer is nil")
			}
			_, ok := w.(io.Writer)
			if !ok {
				t.Skip("Invalid writer type")
			}
		}

		writer := io.MultiWriter(writers...)
		if writer == nil {
			t.Error("MultiWriter returned nil")
		}

		_, err = writer.Write([]byte("test"))
		if err != nil {
			expectedErrorMessages := []string{
				"explicit error message 1",
				"explicit error message 2",
			}
			isExpectedError := false
			for _, msg := range expectedErrorMessages {
				if err.Error() == msg {
					isExpectedError = true
					break
				}
			}
			if !isExpectedError {
				t.Error("Unexpected error from Write")
			}
		}
	})
}

func Fuzz_N22_NewOffsetWriter(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w io.WriterAt
		var off int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&w, &off)
		if err != nil {
			return
		}

		if w == nil {
			t.Skip("WriterAt is nil")
		}
		if off < 0 {
			t.Skip("Offset is negative")
		}

		ow := io.NewOffsetWriter(w, off)
		if ow == nil {
			t.Error("NewOffsetWriter returned nil")
		}
	})
}

func Fuzz_N23_NewSectionReader(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.ReaderAt
		var off int64
		var n int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&r, &off, &n)
		if err != nil {
			return
		}

		if r == nil {
			t.Skip("ReaderAt is nil")
		}
		if off < 0 {
			t.Skip("Offset is negative")
		}
		if n < 0 {
			t.Skip("Length is negative")
		}

		defer func() {
			if r := recover(); r != nil {
				if r == "runtime error: integer overflow" || r == "runtime error: integer underflow" {
					t.Skip()
				} else {
					t.Error("Unexpected panic")
				}
			}
		}()

		sr := io.NewSectionReader(r, off, n)
		if sr == nil {
			t.Error("NewSectionReader returned nil")
		}
	})
}

func Fuzz_N24_NopCloser(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&r)
		if err != nil {
			t.Skip()
		}

		if r == nil {
			t.Skip()
		}

		rc := io.NopCloser(r)

		if rc == nil {
			t.Error("NopCloser returned nil")
		}

		_, ok := rc.(io.WriterTo)
		_, ok2 := r.(io.WriterTo)
		if ok != ok2 {
			t.Error("NopCloser WriterTo implementation mismatch")
		}

		err = rc.Close()
		if err != nil {
			t.Error("NopCloser Close returned error")
		}
	})
}

func Fuzz_N26_ReadAll(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&r)
		if err != nil {
			return
		}

		if r == nil {
			t.Skip("Reader is nil")
		}

		b, err := io.ReadAll(r)
		if err != nil {
			if err.Error() == "EOF" {
				t.Skip("Explicit EOF error")
			}
			t.Error("Unexpected error")
		}

		if b == nil {
			t.Error("Resulting byte slice is nil")
		}
	})
}

func Fuzz_N27_ReadAtLeast(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		var buf []byte
		var min int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&r, &buf, &min)
		if err != nil {
			return
		}

		if min < 0 || len(buf) < 0 {
			return
		}

		if min > len(buf) {
			n, err := io.ReadAtLeast(r, buf, min)
			if n != 0 || err != io.ErrShortBuffer {
				t.Error("Unexpected result for ReadAtLeast with min > len(buf)")
			}
			return
		}

		n, err := io.ReadAtLeast(r, buf, min)
		if err != nil {
			if err != io.EOF && err != io.ErrUnexpectedEOF {
				t.Error("Unexpected error from ReadAtLeast")
			}
			return
		}

		if n < min {
			t.Error("ReadAtLeast did not read at least min bytes")
		}
	})
}

func Fuzz_N28_ReadFull(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		var buf []byte
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&r, &buf)
		if err != nil {
			return
		}

		if r == nil {
			t.Skip("Reader should not be nil")
		}
		if buf == nil {
			t.Skip("Buffer should not be nil")
		}
		if len(buf) == 0 {
			t.Skip("Buffer should not be empty")
		}

		n, err := io.ReadFull(r, buf)
		if err != nil && err.Error() != io.ErrUnexpectedEOF.Error() && err.Error() != io.EOF.Error() {
			t.Error("Unexpected error")
		}
		if n != len(buf) && err == nil {
			t.Error("ReadFull should read exactly len(buf) bytes or return error")
		}
	})
}

func Fuzz_N29_TeeReader(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var r io.Reader
		var w io.Writer
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&r, &w)
		if err != nil {
			t.Log("Error filling data, skipping")
			return
		}

		if r == nil {
			t.Log("Reader is nil, skipping")
			return
		}

		if w == nil {
			t.Log("Writer is nil, skipping")
			return
		}

		defer func() {
			if r := recover(); r != nil {
				t.Error("Unexpected panic occurred")
			}
		}()

		tr := io.TeeReader(r, w)
		if tr == nil {
			t.Error("TeeReader returned nil")
		}
	})
}

func Fuzz_N30_WriteString(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var w io.Writer
		var s string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&w, &s)
		if err != nil {
			return
		}

		if w == nil || s == "" {
			t.Skip()
		}

		n, err := io.WriteString(w, s)
		if err != nil && err.Error() == "explicit exception message" {
			t.Skip()
		} else if err != nil {
			t.Error("unexpected error")
		}

		if n < 0 {
			t.Error("negative result")
		}
	})
}
func fabric_interface_io_Writer_PipeWriter(impl *io.PipeWriter) io.Writer {
	return impl
}

func fabric_interface_io_Writer_OffsetWriter(impl *io.OffsetWriter) io.Writer {
	return impl
}

func fabric_interface_io_WriterAt_OffsetWriter(impl *io.OffsetWriter) io.WriterAt {
	return impl
}

func fabric_interface_io_Reader_SectionReader(impl *io.SectionReader) io.Reader {
	return impl
}

func fabric_interface_io_Reader_PipeReader(impl *io.PipeReader) io.Reader {
	return impl
}

func fabric_interface_io_Reader_LimitedReader(impl *io.LimitedReader) io.Reader {
	return impl
}

func fabric_interface_io_ReaderAt_SectionReader(impl *io.SectionReader) io.ReaderAt {
	return impl
}

func fabric_interface_empty_string(impl string) interface{} {
	return impl
}

func fabric_interface_empty_SectionReader(impl io.SectionReader) interface{} {
	return impl
}

func fabric_interface_empty_PipeWriter(impl io.PipeWriter) interface{} {
	return impl
}

func fabric_interface_empty_PipeReader(impl io.PipeReader) interface{} {
	return impl
}

func fabric_interface_empty_OffsetWriter(impl io.OffsetWriter) interface{} {
	return impl
}

func fabric_interface_empty_LimitedReader(impl io.LimitedReader) interface{} {
	return impl
}

var FabricFuncsForCustomTypes map[string][]reflect.Value

func TestMain(m *testing.M) {
	FabricFuncsForCustomTypes = make(map[string][]reflect.Value)
	FabricFuncsForCustomTypes["io.ReaderAt"] = append(FabricFuncsForCustomTypes["io.ReaderAt"], reflect.ValueOf(fabric_interface_io_ReaderAt_SectionReader))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_SectionReader))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_PipeWriter))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_PipeReader))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_OffsetWriter))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_LimitedReader))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_string))
	FabricFuncsForCustomTypes["io.Writer"] = append(FabricFuncsForCustomTypes["io.Writer"], reflect.ValueOf(fabric_interface_io_Writer_PipeWriter))
	FabricFuncsForCustomTypes["io.Writer"] = append(FabricFuncsForCustomTypes["io.Writer"], reflect.ValueOf(fabric_interface_io_Writer_OffsetWriter))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(fabric_interface_io_Reader_SectionReader))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(fabric_interface_io_Reader_PipeReader))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(fabric_interface_io_Reader_LimitedReader))
	FabricFuncsForCustomTypes["io.WriterAt"] = append(FabricFuncsForCustomTypes["io.WriterAt"], reflect.ValueOf(fabric_interface_io_WriterAt_OffsetWriter))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(io.TeeReader))
	FabricFuncsForCustomTypes["io.ReadCloser"] = append(FabricFuncsForCustomTypes["io.ReadCloser"], reflect.ValueOf(io.NopCloser))
	FabricFuncsForCustomTypes["io.SectionReader"] = append(FabricFuncsForCustomTypes["io.SectionReader"], reflect.ValueOf(io.NewSectionReader))
	FabricFuncsForCustomTypes["io.Writer"] = append(FabricFuncsForCustomTypes["io.Writer"], reflect.ValueOf(io.MultiWriter))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(io.MultiReader))
	FabricFuncsForCustomTypes["io.Reader"] = append(FabricFuncsForCustomTypes["io.Reader"], reflect.ValueOf(io.LimitReader))
	m.Run()
}
