package sortfuzz

// Edit if desired. Code generated by "fzgen --llm=groq -o=targets\sort\autofuzz_test.go sort".
// false
// func
// logic

import (
	"math"
	"reflect"
	sort "sort"
	"testing"

	"github.com/BelehovEgor/fzgen/fuzzer"
)

func Fuzz_N1_Float64Slice_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.Float64Slice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		x.Len()
	})
}

func Fuzz_N2_Float64Slice_Less(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.Float64Slice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		x.Less(i, j)
	})
}

func Fuzz_N3_Float64Slice_Search(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p sort.Float64Slice
		var x float64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&p, &x)
		if err != nil {
			return
		}

		p.Search(x)
	})
}

func Fuzz_N4_Float64Slice_Sort(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.Float64Slice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		x.Sort()
	})
}

func Fuzz_N5_Float64Slice_Swap(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.Float64Slice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		x.Swap(i, j)
	})
}

func Fuzz_N6_IntSlice_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.IntSlice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		x.Len()
	})
}

func Fuzz_N7_IntSlice_Less(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.IntSlice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		x.Less(i, j)
	})
}

func Fuzz_N8_IntSlice_Search(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p sort.IntSlice
		var x int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&p, &x)
		if err != nil {
			return
		}

		p.Search(x)
	})
}

func Fuzz_N9_IntSlice_Sort(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.IntSlice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		x.Sort()
	})
}

func Fuzz_N10_IntSlice_Swap(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.IntSlice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		x.Swap(i, j)
	})
}

func Fuzz_N11_StringSlice_Len(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.StringSlice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		x.Len()
	})
}

func Fuzz_N12_StringSlice_Less(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.StringSlice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		x.Less(i, j)
	})
}

func Fuzz_N13_StringSlice_Search(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var p sort.StringSlice
		var x string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&p, &x)
		if err != nil {
			return
		}

		p.Search(x)
	})
}

func Fuzz_N14_StringSlice_Sort(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.StringSlice
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		x.Sort()
	})
}

func Fuzz_N15_StringSlice_Swap(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x sort.StringSlice
		var i int
		var j int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x, &i, &j)
		if err != nil {
			return
		}

		x.Swap(i, j)
	})
}

func Fuzz_N17_Float64s(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []float64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		if reflect.DeepEqual(x, nil) {
			t.Skip("skipping nil slice")
		}

		defer func() {
			if r := recover(); r != nil {
				if r == "explicit exception message" {
					t.Skip("skipping explicit exception")
				} else {
					t.Error("unexpected panic")
				}
			}
		}()

		sort.Float64s(x)
		for i := 1; i < len(x); i++ {
			if x[i-1] > x[i] {
				t.Error("slice not sorted")
			}
		}
	})
}

func Fuzz_N18_Float64sAreSorted(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []float64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		if x == nil {
			t.Log("Skipping nil slice")
			return
		}

		defer func() {
			if r := recover(); r != nil {
				t.Error("Recovered from unexpected panic")
			}
		}()

		result := sort.Float64sAreSorted(x)
		if !result && !isValid(x) {
			t.Error("Invalid input did not return false as expected")
		}
	})
}

func isValid(x []float64) bool {
	if len(x) == 0 {
		return true
	}

	seenNaN := false
	for _, v := range x {
		if seenNaN && v < math.NaN() {
			return false
		}
		if math.IsNaN(v) {
			seenNaN = true
		}
	}

	return true
}

func Fuzz_N19_Ints(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		defer func() {
			if r := recover(); r != nil {
				if r == "explicit exception message" {
					return
				}
				t.Error("unexpected panic")
			}
		}()

		if len(x) < 0 {
			t.Log("invalid slice length")
			return
		}

		initial := make([]int, len(x))
		copy(initial, x)

		sort.Ints(x)

		if !sort.IntsAreSorted(x) {
			t.Error("slice not sorted")
		}

		if !reflect.DeepEqual(initial, x) && !sort.IntsAreSorted(initial) {
			t.Error("input slice was unsorted and changed")
		}
	})
}

func Fuzz_N20_IntsAreSorted(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		if len(x) == 0 {
			t.Skip("skipping empty slice")
		}

		defer func() {
			if r := recover(); r != nil {
				if r == "explicit exception message" {
					t.Skip("skipping explicit exception")
				} else {
					t.Error("panic occurred")
				}
			}
		}()

		result := sort.IntsAreSorted(x)
		if !result {
			t.Error("unexpected result")
		}
	})
}

func Fuzz_N24_SearchFloat64s(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var a []float64
		var x float64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&a, &x)
		if err != nil {
			return
		}

		if !sort.Float64sAreSorted(a) {
			t.Skip("Slice is not sorted")
		}

		defer func() {
			if r := recover(); r != nil {
				switch r {
				case "explicit error message 1", "explicit error message 2":
					t.Skip("Explicit exception caught, skipping test")
				default:
					t.Error("Unexpected panic")
				}
			}
		}()

		result := sort.SearchFloat64s(a, x)
		if result < 0 || result > len(a) {
			t.Error("Invalid result from SearchFloat64s")
		}
	})
}

func Fuzz_N25_SearchInts(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var a []int
		var x int
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&a, &x)
		if err != nil {
			return
		}

		// Validate if the slice is sorted in ascending order
		for i := 0; i < len(a)-1; i++ {
			if a[i] > a[i+1] {
				t.Skip("Slice is not sorted in ascending order")
			}
		}

		defer func() {
			if r := recover(); r != nil {
				if r == "some expected error message" {
					t.Skip("Expected error occurred")
				} else {
					t.Error("Unexpected error occurred")
				}
			}
		}()

		result := sort.SearchInts(a, x)
		if result < 0 || result > len(a) {
			t.Error("Invalid result from SearchInts")
		}
	})
}

func Fuzz_N26_SearchStrings(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var a []string
		var x string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&a, &x)
		if err != nil {
			return
		}

		if !sort.StringsAreSorted(a) {
			t.Skip("Slice is not sorted")
		}

		defer func() {
			if r := recover(); r != nil {
				t.Error("Unexpected panic")
			}
		}()

		result := sort.SearchStrings(a, x)

		if result < 0 || result > len(a) {
			t.Error("Invalid result")
		}
	})
}

func Fuzz_N32_Strings(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		for _, s := range x {
			if s == "" {
				t.Skip("Empty string in input, skipping")
			}
		}

		defer func() {
			if r := recover(); r != nil {
				if r == "explicit exception message" {
					t.Skip("Explicit exception, skipping")
				} else {
					t.Error("Unexpected panic")
				}
			}
		}()

		sort.Strings(x)
	})
}

func Fuzz_N33_StringsAreSorted(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var x []string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&x)
		if err != nil {
			return
		}

		defer func() {
			if r := recover(); r != nil {
				if r != "explicit exception message" {
					t.Error("Unexpected panic occurred")
				}
			}
		}()

		result := sort.StringsAreSorted(x)
		if len(x) > 0 {
			if !result && x[0] < x[len(x)-1] {
				t.Error("Function returned false but slice is not sorted")
			}
		}
	})
}
func fabric_interface_empty_string(impl string) interface{} {
	return impl
}

var FabricFuncsForCustomTypes map[string][]reflect.Value

func TestMain(m *testing.M) {
	FabricFuncsForCustomTypes = make(map[string][]reflect.Value)
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_string))
	m.Run()
}
