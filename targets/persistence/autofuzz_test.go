package main

// Edit if desired. Code generated by "fzgen -mocks --mocksPackagePrefix=example --mocksDepth=5 --llm=groq github.com/zond/god/persistence".
// false
// unexported fields

import (
	"reflect"
	"testing"

	"github.com/BelehovEgor/fzgen/fuzzer"
	persistence "github.com/zond/god/persistence"
)

func Fuzz_N1_Logger_Clear(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var self *persistence.Logger
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&self)
		if err != nil || self == nil {
			return
		}

		self.Clear()
	})
}

func Fuzz_N2_Logger_Dump(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var self *persistence.Logger
		var o persistence.Op
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&self, &o)
		if err != nil || self == nil {
			return
		}

		self.Dump(o)
	})
}

func Fuzz_N3_Logger_Limit(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var self *persistence.Logger
		var maxSize int64
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&self, &maxSize)
		if err != nil || self == nil {
			return
		}

		self.Limit(maxSize)
	})
}

func Fuzz_N4_Logger_Play(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var self *persistence.Logger
		var operate persistence.Operate
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&self, &operate)
		if err != nil || self == nil {
			return
		}

		self.Play(operate)
	})
}

func Fuzz_N5_Logger_Record(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var self *persistence.Logger
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&self)
		if err != nil || self == nil {
			return
		}

		self.Record()
	})
}

func Fuzz_N6_Logger_Recording(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var self *persistence.Logger
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&self)
		if err != nil || self == nil {
			return
		}

		self.Recording()
	})
}

func Fuzz_N7_Logger_Stop(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var self *persistence.Logger
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&self)
		if err != nil || self == nil {
			return
		}

		self.Stop()
	})
}

func Fuzz_N8_NewLogger(f *testing.F) {
	f.Fuzz(func(t *testing.T, data []byte) {
		var dir string
		fz := fuzzer.NewFuzzerV2(data, FabricFuncsForCustomTypes, t, fuzzer.Constructors)
		err := fz.Fill2(&dir)
		if err != nil {
			return
		}

		defer func() {
			if r := recover(); r != nil {
				rstr, _ := r.(string)
				if rstr != "invalid argument" {
					t.Error("Unexpected panic")
				}
			}
		}()

		l := persistence.NewLogger(dir)
		if l == nil {
			t.Error("Logger is nil")
			return
		}
	})
}
func fabric_mock_func_1() persistence.Operate {
	return func(persistence.Op) {
		return
	}
}

func fabric_interface_empty_string(impl string) interface{} {
	return impl
}

func fabric_interface_empty_Op(impl persistence.Op) interface{} {
	return impl
}

func fabric_interface_empty_Logger(impl persistence.Logger) interface{} {
	return impl
}

var FabricFuncsForCustomTypes map[string][]reflect.Value

func TestMain(m *testing.M) {
	FabricFuncsForCustomTypes = make(map[string][]reflect.Value)
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_string))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_Op))
	FabricFuncsForCustomTypes["interface {}"] = append(FabricFuncsForCustomTypes["interface {}"], reflect.ValueOf(fabric_interface_empty_Logger))
	FabricFuncsForCustomTypes["persistence.Operate"] = append(FabricFuncsForCustomTypes["persistence.Operate"], reflect.ValueOf(fabric_mock_func_1))
	FabricFuncsForCustomTypes["persistence.Logger"] = append(FabricFuncsForCustomTypes["persistence.Logger"], reflect.ValueOf(persistence.NewLogger))
	m.Run()
}
